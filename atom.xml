<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacean say Hello</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jacean.github.io/"/>
  <updated>2016-06-30T16:15:25.506Z</updated>
  <id>http://jacean.github.io/</id>
  
  <author>
    <name>Jacean Wan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript中模块封装</title>
    <link href="http://jacean.github.io/2016/06/30/javascript%E4%B8%AD%E6%A8%A1%E5%9D%97%E5%B0%81%E8%A3%85/"/>
    <id>http://jacean.github.io/2016/06/30/javascript中模块封装/</id>
    <published>2016-06-30T15:56:09.000Z</published>
    <updated>2016-06-30T16:15:25.506Z</updated>
    
    <content type="html"><![CDATA[<p>javascript假设一切都是正确的，给所有脚本同样的权限，脚本、变量之间可以互相覆盖，这就给开发带来了一定的意外。<br>这里我们通过引入两个存在干扰的脚本文件来一步步解决这个问题。</p>
<a id="more"></a>
<h2 id="引入干扰"><a href="#引入干扰" class="headerlink" title="引入干扰"></a>引入干扰</h2><p>在一个HTML页面中引入两个脚本文件script1.js和script2.js.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//HTML</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;script1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;script2.js&quot;&gt;&lt;/script&gt;    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&quot;a:&quot;+ a);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">//script1.js</span><br><span class="line"></span><br><span class="line">var a = 1;</span><br><span class="line"></span><br><span class="line">function init(params) &#123;</span><br><span class="line">    console.log(&quot;1-init:&quot; + a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = init;</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line"></span><br><span class="line">//script2.js</span><br><span class="line"></span><br><span class="line">var a=2;</span><br><span class="line"></span><br><span class="line">function init(params) &#123;</span><br><span class="line">    console.log(&quot;2-init:&quot;+a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload=init;</span><br></pre></td></tr></table></figure></p>
<p>实际上最后的结果是:</p>
<blockquote>
<p>a:2<br>2-init:2</p>
</blockquote>
<p>执行结果为后加载的script2.js。</p>
<h2 id="模块封装"><a href="#模块封装" class="headerlink" title="模块封装"></a>模块封装</h2><p>这种情况下，为了代码的正确执行，我们就可以采取模块封装，人为加上命名空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//script1.js</span><br><span class="line">var script1 = function () &#123;</span><br><span class="line">    var a = 1;</span><br><span class="line"></span><br><span class="line">    function init(params) &#123;</span><br><span class="line">        console.log(&quot;1-init:&quot; + a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        a:a,</span><br><span class="line">        init:init</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();            //不要忘了这个执行函数的括号</span><br><span class="line"></span><br><span class="line">window.addEventListener(&quot;load&quot;,script1.init,false);</span><br><span class="line"></span><br><span class="line">//script2.js</span><br><span class="line">var script2 = function () &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line"></span><br><span class="line">    function init(params) &#123;</span><br><span class="line">        console.log(&quot;2-init:&quot; + a);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    return &#123;</span><br><span class="line">        a:a,</span><br><span class="line">        init:init</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();            //不要忘了这个执行函数的括号</span><br><span class="line"></span><br><span class="line">window.addEventListener(&quot;load&quot;,script2.init,false);</span><br></pre></td></tr></table></figure></p>
<p>这样的话，在命名上就避免了冲突，各个脚本之间互不干扰，各自执行。<br>上面的代码执行结果是：<br>&gt;<br>index.html:15 Uncaught ReferenceError: a is not defined(anonymous function) @ index.html:15<br>script1.js:13 1-init:1<br>script2.js:13 2-init:2</p>
<p>a没有被定义，因为现在两个脚本的变量都在各自命名空间内部，所以，要使用的话得是明确指出是哪个，增强了目标性。</p>
<p>如上，这种封装之后，我们只需要通过return来暴露自己想要暴露的，而隐藏了自己不想公诸于众的东西，增加了安全性。</p>
<p>一定要注意这样做是用了函数执行自身的方法，即在函数声明之后加了括号，function(),来让函数立即执行，保证脚本变量确实是接收到了函数内部的返回值。</p>
<p>我这里使用的是return函数指针，而不是函数本身，这个可以根据自己喜好，比如写成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var script2 = function () &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    return &#123;</span><br><span class="line">        a:a,</span><br><span class="line">        init:function (params) &#123;</span><br><span class="line">            console.log(&quot;2-init:&quot; + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>
<p>当然，有时候不需要暴露任何东西的时候，有一种更简单的写法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    var a=1;</span><br><span class="line">    function init()&#123;&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>当然，即使这样我们也可以暴露一些东西，以全局变量的形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function(root)&#123;</span><br><span class="line">    root.x=1;</span><br><span class="line">    root.a=function()&#123;</span><br><span class="line">        alert(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(this);</span><br><span class="line"></span><br><span class="line">console.log(x);</span><br><span class="line">a();</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript假设一切都是正确的，给所有脚本同样的权限，脚本、变量之间可以互相覆盖，这就给开发带来了一定的意外。&lt;br&gt;这里我们通过引入两个存在干扰的脚本文件来一步步解决这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jacean.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://jacean.github.io/tags/javascript/"/>
    
      <category term="封装" scheme="http://jacean.github.io/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>javascript中对象的直接属性和__proto__属性</title>
    <link href="http://jacean.github.io/2016/06/30/javascript%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B4%E6%8E%A5%E5%B1%9E%E6%80%A7%E5%92%8C-proto-%E5%B1%9E%E6%80%A7/"/>
    <id>http://jacean.github.io/2016/06/30/javascript中对象的直接属性和-proto-属性/</id>
    <published>2016-06-30T15:54:30.000Z</published>
    <updated>2016-06-30T16:10:06.345Z</updated>
    
    <content type="html"><![CDATA[<p>先补充下 __proto__ 和prototype的知识。</p>
<h2 id="对象的内部原型-proto-和构造器的原型（prototype）。"><a href="#对象的内部原型-proto-和构造器的原型（prototype）。" class="headerlink" title="对象的内部原型( __proto__ )和构造器的原型（prototype）。"></a>对象的内部原型( __proto__ )和构造器的原型（prototype）。</h2><p>所有构造器/函数(包含自定义)的 __proto__ 都是指向Function.prototype这样一个<em>空函数（typeof Function.prototype===’function’ -&gt;true）</em>的，而Math和JSON这样以对象形式存在的，他们的__proto__是Object.prototype.<br>继续深入有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.__proto__ === Object.prototype;</span><br></pre></td></tr></table></figure>
<p>,而 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.__proto__ === null</span><br></pre></td></tr></table></figure>
<p>所有构造器的实例对象的 __proto__ 都是指向其构造器的 <em>prototype</em>。<br><a id="more"></a><br>看下面这个例子，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function objectTest() &#123;</span><br><span class="line">    var o1 = &#123;&#125;;   </span><br><span class="line">    var o6 = Object.create(Object.prototype);</span><br><span class="line">    var o7 = Object.create(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调试后可以看到这样的结果在scope中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Local Return value:undefined</span><br><span class="line">   o1:Object </span><br><span class="line">       __proto__:Object    </span><br><span class="line">   o6:Object</span><br><span class="line">       __proto__:Object</span><br><span class="line">   o7:Object</span><br><span class="line">       No Properties</span><br></pre></td></tr></table></figure>
<p>可以看到O1、O6都是自带了__proto__属性的，O7是自定义null为prototype来创建对象，所以就没有此属性。<br>又__proto__是其构造器的prototype属性，故有，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o1.__proto__===Object.prototype   //true</span><br></pre></td></tr></table></figure>
<p>详见<a href="http://www.cnblogs.com/snandy/archive/2012/09/01/2664134.html" target="_blank" rel="external">JavaScript中<strong>proto</strong>与prototype的关系</a>。</p>
<h2 id="对象的直接属性和-proto-属性"><a href="#对象的直接属性和-proto-属性" class="headerlink" title="对象的直接属性和__proto__属性"></a>对象的直接属性和__proto__属性</h2><p>修改构造器的prototype的属性或方法，其实例对象的__proto__依然恒等于构造器的prototype，两者指向同一个对象。<br>在查找对象属性的时候，顺序是  </p>
<blockquote>
<p>直接属性 -|-&gt;  __proto__属性,有则返回，无则深入。</p>
</blockquote>
<p>在修改对象属性的时候，顺序是</p>
<blockquote>
<p>直接属性 -|-|  __proto__属性，只会修改直接属性，而不深入到__proto__这个继承自构造器的属性。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">    this.name=&quot;jacean&quot;;</span><br><span class="line">    this.age=12;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sex=&quot;male&quot;;</span><br><span class="line">Person.prototype.country=&quot;Chinese&quot;;</span><br><span class="line"></span><br><span class="line">var p1=new Person();</span><br><span class="line">var p2=new Person();</span><br><span class="line"></span><br><span class="line">//初始状态下两个实例的属性是一样的</span><br><span class="line">console.log(p1.name);   //jacean</span><br><span class="line">console.log(p1.sex);    //male</span><br><span class="line">console.log(p1.__proto__.sex)   //male</span><br><span class="line"></span><br><span class="line">console.log(p2.name);   //jacean</span><br><span class="line">console.log(p2.sex);    //male</span><br><span class="line">console.log(p2.__proto__.sex)   //male</span><br><span class="line"></span><br><span class="line">console.log(&quot;......&quot;);</span><br><span class="line">p1.name=&quot;bob&quot;;</span><br><span class="line">p1.sex=&quot;famle&quot;;</span><br><span class="line">//更改了p1的直接属性name，因为p1没有sex的直接属性，所以在这里会给p1添加sex的直接属性，而不会深入到__proto__去修改构造器的sex</span><br><span class="line">//所以这里的sex修改并不会影响p2</span><br><span class="line">console.log(p1.name);   //bob</span><br><span class="line">console.log(p1.sex);    //famale</span><br><span class="line">console.log(p1.__proto__.sex)   //male</span><br><span class="line"></span><br><span class="line">console.log(p2.name);   //jacean</span><br><span class="line">console.log(p2.sex);    //male</span><br><span class="line">console.log(p2.__proto__.sex)   //male</span><br><span class="line">console.log(&quot;......&quot;);</span><br><span class="line"></span><br><span class="line">Person.prototype.sex=&quot;nomale&quot;;</span><br><span class="line">//修改了构造器的sex属性，相对应的p1和p2的__proto__.sex也会发生改变。</span><br><span class="line">//p1因为有直接sex属性，所以p1.sex不受影响，而p2没有sex直接属性所以p2.sex是读取的构造器属性</span><br><span class="line">console.log(p1.name);   //bob</span><br><span class="line">console.log(p1.sex);    //famale</span><br><span class="line">console.log(p1.__proto__.sex)   //nomale</span><br><span class="line"></span><br><span class="line">console.log(p2.name);   //jacean</span><br><span class="line">console.log(p2.sex);    //nomale,p2是没有sex这个直接属性的，所以这里读到的还是其构造器的属性</span><br><span class="line">console.log(p2.__proto__.sex)   //nomale</span><br><span class="line">console.log(&quot;......&quot;);</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先补充下 __proto__ 和prototype的知识。&lt;/p&gt;
&lt;h2 id=&quot;对象的内部原型-proto-和构造器的原型（prototype）。&quot;&gt;&lt;a href=&quot;#对象的内部原型-proto-和构造器的原型（prototype）。&quot; class=&quot;headerlink&quot; title=&quot;对象的内部原型( __proto__ )和构造器的原型（prototype）。&quot;&gt;&lt;/a&gt;对象的内部原型( __proto__ )和构造器的原型（prototype）。&lt;/h2&gt;&lt;p&gt;所有构造器/函数(包含自定义)的 __proto__ 都是指向Function.prototype这样一个&lt;em&gt;空函数（typeof Function.prototype===’function’ -&amp;gt;true）&lt;/em&gt;的，而Math和JSON这样以对象形式存在的，他们的__proto__是Object.prototype.&lt;br&gt;继续深入有&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Function.prototype.__proto__ === Object.prototype;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;,而 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object.prototype.__proto__ === null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有构造器的实例对象的 __proto__ 都是指向其构造器的 &lt;em&gt;prototype&lt;/em&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jacean.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://jacean.github.io/tags/javascript/"/>
    
      <category term="__proto__" scheme="http://jacean.github.io/tags/proto/"/>
    
  </entry>
  
  <entry>
    <title>javascript的一些怪点</title>
    <link href="http://jacean.github.io/2016/06/30/javascript%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%AA%E7%82%B9/"/>
    <id>http://jacean.github.io/2016/06/30/javascript的一些怪点/</id>
    <published>2016-06-30T15:53:10.000Z</published>
    <updated>2016-06-30T16:12:22.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="null作为对象却不是实例"><a href="#null作为对象却不是实例" class="headerlink" title="null作为对象却不是实例"></a>null作为对象却不是实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof null===&apos;object&apos;   -&gt;true</span><br></pre></td></tr></table></figure>
<p>可以看到，null确实是一个对象，可它是一个完全没有意义的对象，没有任何属性和方法。<br>我们还知道，<em>所有对象都是Object的实例</em>，那么null是吗？</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null instanceof Object   -&gt;false</span><br></pre></td></tr></table></figure>
<p>可以看到，null不是Object的实例，没有值的它不能作为任何对象的实例。</p>
<p>所以，<strong><em>尽管null是一个对象，但它并不被看作是对象的实例。</em></strong></p>
<p>而null作为一个没有值得对象，用它来使用Object.create实例对象的时候，将覆盖对象的__proto__属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function objectTest() &#123;</span><br><span class="line">    var o1 = &#123;&#125;;   </span><br><span class="line">    var o6 = Object.create(Object.prototype);</span><br><span class="line">    var o7 = Object.create(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调试后可以看到这样的结果在scope中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Local Return value:undefined</span><br><span class="line">   o1:Object </span><br><span class="line">       __proto__:Object    </span><br><span class="line">   o6:Object</span><br><span class="line">       __proto__:Object</span><br><span class="line">   o7:Object</span><br><span class="line">       No Properties</span><br></pre></td></tr></table></figure></p>
<p>可以看到O1、O6都是自带了__proto__属性的，O7是自定义null为prototype来创建对象，所以就没有此属性。</p>
<h2 id="NaN作为数字却不能自等"><a href="#NaN作为数字却不能自等" class="headerlink" title="NaN作为数字却不能自等"></a>NaN作为数字却不能自等</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//NaN的类型确确实实是number数字</span><br><span class="line">typeof NaN===&apos;number&apos;</span><br><span class="line">//true</span><br><span class="line"></span><br><span class="line">//NaN又确确实实不等于NaN</span><br><span class="line">NaN==NaN</span><br><span class="line">//false</span><br><span class="line"></span><br><span class="line">//要判断是不是NaN只能使用isNaN()方法</span><br><span class="line">isNaN(NaN)</span><br><span class="line">//true</span><br></pre></td></tr></table></figure>
<h2 id="空数组是真值但却不等于true"><a href="#空数组是真值但却不等于true" class="headerlink" title="空数组是真值但却不等于true"></a>空数组是真值但却不等于true</h2><p>判断是不是真值，if一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(new Array())&#123;</span><br><span class="line">    console.log(&quot;[] is true&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&quot;[] is false&quot;);</span><br><span class="line">&#125;                       //[] is true</span><br></pre></td></tr></table></figure></p>
<p>通过if的判断可以看出来空数组[]是真值，但是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log([]==true);  //false</span><br><span class="line">if ([]==true) &#123;</span><br><span class="line">    console.log(&quot;[] is true&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&quot;[] is false&quot;);</span><br><span class="line">&#125;                       //false</span><br></pre></td></tr></table></figure></p>
<p>也就是说作为真值的[]==false。</p>
<p>有点懵圈，来梳理一下。<br>我们知道，在js中，我们可以通过if的逻辑判断条件来区分真值/假值，所以可以得到6个假值，分别是：</p>
<blockquote>
<p>false,undefined,null,0,””,NaN</p>
</blockquote>
<p>那么除此之外的就都是真值了。可以这样理解：<br>在javascript中，所有非布尔值都有一个内置的布尔标志，在进行布尔比较的时候，js就会调用这个布尔标志。<br>如上假值，在进行布尔比较的时候，会临时的转变成false。</p>
<p>但是，并不是说真值就等于true。即在==和!=这类比较运算中，真值不一定等于true。<br>比较运算最后都会转到number/string值的隐式转换。</p>
<blockquote>
<p>ECMA规范    ToPrimitive ( input [ , PreferredType ] )</p>
<ol>
<li>Assert: Type(O) is Object.</li>
<li>Assert: Type(hint) is String and its value is either “string” or “number”.</li>
<li>If hint is “string”, then<ul>
<li>Let methodNames be « “toString”, “valueOf” ».</li>
</ul>
</li>
<li>Else,<ul>
<li>Let methodNames be « “valueOf”, “toString” ».</li>
</ul>
</li>
<li>For each name in methodNames in List order, do<ul>
<li>Let method be ? Get(O, name).</li>
<li>If IsCallable(method) is true, then<ul>
<li>Let result be ? Call(method, O).</li>
<li>If Type(result) is not Object, return result.</li>
</ul>
</li>
</ul>
</li>
<li>Throw a TypeError exception.</li>
</ol>
</blockquote>
<ul>
<li>当转换是趋向于string的，则执行toString-&gt;valueOf</li>
<li>当转换时趋向于number的，则执行valueof-&gt;toString</li>
</ul>
<p>所以，根据逻辑顺序就有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                        []==true</span><br><span class="line">[]==ToNumber(true)      []==1</span><br><span class="line">ToPrimitive([])==1      []==1</span><br><span class="line">ToString([])==1         &quot;&quot;==1</span><br><span class="line">ToNumber(&quot;&quot;)==1         0==1</span><br><span class="line">                        false</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;null作为对象却不是实例&quot;&gt;&lt;a href=&quot;#null作为对象却不是实例&quot; class=&quot;headerlink&quot; title=&quot;null作为对象却不是实例&quot;&gt;&lt;/a&gt;null作为对象却不是实例&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typeof null===&amp;apos;object&amp;apos;   -&amp;gt;true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，null确实是一个对象，可它是一个完全没有意义的对象，没有任何属性和方法。&lt;br&gt;我们还知道，&lt;em&gt;所有对象都是Object的实例&lt;/em&gt;，那么null是吗？&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jacean.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://jacean.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu重建ESP引导</title>
    <link href="http://jacean.github.io/2016/06/30/ubuntu%E9%87%8D%E5%BB%BAESP%E5%BC%95%E5%AF%BC/"/>
    <id>http://jacean.github.io/2016/06/30/ubuntu重建ESP引导/</id>
    <published>2016-06-30T15:48:54.000Z</published>
    <updated>2016-06-30T16:15:54.427Z</updated>
    
    <content type="html"><![CDATA[<p>加固态的时候，把windows完全安装在了固态上，然后就把原来的C盘直接格式化，连带着旧的引导分区都给格式化没了，后来就没法启动Ubuntu。<br>要恢复引导，不是简单的修复，从ESP分区里链接上ubuntu的efi启动就行，必须得重建ubuntu的ESP引导。实际环境是：</p>
<blockquote>
<p>ESP分区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- EFI/</span><br><span class="line">    - boot/                     //efi启动文件</span><br><span class="line">    - Microsoft/                //各种字体图标的资源文件和boot内的启动efi文件</span><br><span class="line">    - (ubuntu/)                 //现在是没有的，目标是生成这个文件夹，只要有这个文件夹就一切好办</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>可以看到根本没有ubuntu的引导文件，所以网上说的<a href="http://tieba.baidu.com/p/3338849023" target="_blank" rel="external">refind</a>，easyUEFI等等是不行的。<br><a id="more"></a><br>要重建ubuntu的引导分区，那么就得先进入ubuntu，然后利用ubuntu自己的系统来重建。</p>
<h2 id="grub命令进入ubuntu"><a href="#grub命令进入ubuntu" class="headerlink" title="grub命令进入ubuntu"></a>grub命令进入ubuntu</h2><p>但正是苦于没有引导进不去ubuntu，所以就需要手动慢慢的来找到入口，怎么找，用grub。<br>可以直接做一个grub的U盘，也可以把ubuntu的iso刻录到U盘里，利用其自带的grub来进行。以ubuntu的U盘镜像为例。<br>选择U盘启动，进入后按<em>C</em>进入grub的命令行。<br>先用ls看下自己的硬盘结构,找到自己的ubuntu分区,如果不确定的话可以用cat命令的补全来查看.<br>我因为加了固态,所以有hd0,hd1,和hd2.先根据分区数量确定了hd2是机械盘,然后用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat (hd2,...TAB</span><br></pre></td></tr></table></figure></p>
<p>的补全,发现<em>msdos9</em>的格式是<em>ext*</em>,所以就确定了msdos9是我的ubuntu主分区.<br>接着,就可以设置根文件夹了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set root=(hd2,9)                            //指定/boot所在分区</span><br></pre></td></tr></table></figure>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linux /boot/vmli... ro root=/dev/sdb9       //设定内核和根分区,这里有提示出2个版本,一个是36,一个34,我选择了36.</span><br><span class="line">                                            //sdb9的意思是我硬盘的第9个分区,sd是sata口接的,b是linux读取时顺序分配的标号,我的固态是sda,机械是sdb.</span><br><span class="line">initrd /initrd...                           //补全后是initrd.img,init ramdisk,设定系统加载</span><br><span class="line">boot            //自动重启</span><br></pre></td></tr></table></figure>
<p>有省略号的地方进行tab补全就好.</p>
<blockquote>
<p>我做的时候,有几次tab补全没用,后来是用u盘试装了下ubuntu,然后在里面的终端中这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sdb9 /mnt</span><br><span class="line">sudo grup-install --boot-directory =/mnt/boot/dev/sda       //提示失败,具体原因忘了,好像是efi怎么了,然后我就退出重启,进入grup,重新试了下tab,就好使了，不知道什么原因</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>计算机重启后直接进入到ubuntu,这时执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-install -v</span><br><span class="line">[sudo] jacean 的密码： </span><br><span class="line">grub-install：信息： executing modprobe efivars 2&gt;/dev/null.</span><br><span class="line">grub-install：信息： Looking for /sys/firmware/efi ...</span><br><span class="line">grub-install：信息： ...found.</span><br><span class="line">grub-install：信息： ... but x86_64-efi platform not available.</span><br><span class="line">grub-install：信息： ... not found. Looking for /proc/device-tree ...</span><br><span class="line">grub-install：信息： ... not found.</span><br><span class="line">Installing for i386-pc platform.</span><br><span class="line">grub-install：错误： install device isn&apos;t specified.</span><br></pre></td></tr></table></figure>
<p>仍然报错.然后就想着用boot-repair.</p>
<h2 id="安装boot-repair"><a href="#安装boot-repair" class="headerlink" title="安装boot-repair"></a>安装boot-repair</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y boot-repair</span><br><span class="line"></span><br><span class="line">sudo boot-repair</span><br></pre></td></tr></table></figure>
<p>bootrepair自己都提示要等好几分钟，所以就只能等了。<br>注意这中间会有提示输入给出的终端命令来移除就得grub和重装新的grub，照着做完后点击弹出窗口的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">已成功修复启动。</span><br><span class="line"></span><br><span class="line">请纸录以下URL：</span><br><span class="line">http://paste.ubuntu.com/18152255/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果您仍然遇到引导问题，请在此 URL 处留言：</span><br><span class="line">boot.repair@gmail.com 或您最喜爱的论坛。</span><br><span class="line"></span><br><span class="line">现在您可以重新启动计算机。</span><br><span class="line">别忘了在BIOS中设置从sdb (500GB)磁盘启动</span><br><span class="line"></span><br><span class="line">[操作系统正在使用中 - Ubuntu 15.10]的引导文件距磁盘头部太远，你的BIOS可能无法检测到它们。 您可以创建一个/boot分区然后重试 (EXT4, &gt;200MB, 磁盘起始位置). 这可以通过诸如 gParted 等工具来操作。 然后在 [引导修复]的[单独的/boot分区]中选择该分区。 (https://help.ubuntu.com/community/BootPartition)</span><br><span class="line"></span><br><span class="line">If your computer reboots directly into Windows, try to change the boot order in your BIOS.</span><br><span class="line">If your BIOS does not allow to change the boot order, change the default boot entry of the Windows bootloader.</span><br><span class="line">For example you can boot into Windows, then type the following command in an admin command prompt:</span><br><span class="line">bcdedit /set &#123;bootmgr&#125; path \EFI\ubuntu\shimx64.efi</span><br></pre></td></tr></table></figure></p>
<p>不用管这个，直接确认，然后重启。<br>重启之后会发现启动项有很多个，不过ubuntu和ubuntu是存在的。还有我之前做的refind的尝试中的efi启动文件。进入windows用dg删掉之前多余的东西，把esp里的EFI文件夹恢复本来面貌。<br>然后，进入ubuntu<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure></p>
<p>重新更新下grub，可以看到之前的废品已经没有了。但是，还有很多windows boot manager之类的启动项，重复又难看，为了保持清爽，可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p>
<p>在这个文件里面把不需要的注释掉,只留下想要的.<br>但是,这又一个缺点就是,如文件开头所述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># DO NOT EDIT THIS FILE</span><br><span class="line">#</span><br><span class="line"># It is automatically generated by grub-mkconfig using templates</span><br><span class="line"># from /etc/grub.d and settings from /etc/default/grub</span><br><span class="line">#</span><br></pre></td></tr></table></figure></p>
<p>这个文件是根据grub.d和grub这两个文件生成的,改动这个,如果执行grub update或是其他一些更新指令,都会让改动消失恢复默认.所以可酌情去修改grub文件和grub.d文件夹下的文件.可以设置默认启动项,设置前后景色,设置图标等等.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;加固态的时候，把windows完全安装在了固态上，然后就把原来的C盘直接格式化，连带着旧的引导分区都给格式化没了，后来就没法启动Ubuntu。&lt;br&gt;要恢复引导，不是简单的修复，从ESP分区里链接上ubuntu的efi启动就行，必须得重建ubuntu的ESP引导。实际环境是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ESP分区：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- EFI/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - boot/                     //efi启动文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - Microsoft/                //各种字体图标的资源文件和boot内的启动efi文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - (ubuntu/)                 //现在是没有的，目标是生成这个文件夹，只要有这个文件夹就一切好办&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到根本没有ubuntu的引导文件，所以网上说的&lt;a href=&quot;http://tieba.baidu.com/p/3338849023&quot;&gt;refind&lt;/a&gt;，easyUEFI等等是不行的。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://jacean.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://jacean.github.io/tags/Ubuntu/"/>
    
      <category term="UEFI" scheme="http://jacean.github.io/tags/UEFI/"/>
    
      <category term="引导" scheme="http://jacean.github.io/tags/%E5%BC%95%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="http://jacean.github.io/2016/05/27/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://jacean.github.io/2016/05/27/npm常用命令/</id>
    <published>2016-05-27T09:50:35.000Z</published>
    <updated>2016-05-27T09:53:07.051Z</updated>
    
    <content type="html"><![CDATA[<p>开始练手gulp的时候就用上了npm，这是促进nodejs繁荣的包管理器，记录下它的一些常用命令以便查阅。<br>node package manager<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm help		万能金钥匙</span><br><span class="line"></span><br><span class="line">npm install xxx 安装模块</span><br><span class="line"></span><br><span class="line">npm install xxx -g 将模块安装到全局环境中</span><br><span class="line"></span><br><span class="line">npm ls 查看安装的模块及依赖</span><br><span class="line"></span><br><span class="line">npm ls -g 查看全局安装的模块及依赖</span><br><span class="line"></span><br><span class="line">npm uninstall xxx  (-g) 卸载模块</span><br><span class="line"></span><br><span class="line">npm cache clean 清理缓存</span><br></pre></td></tr></table></figure></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm安装有两种方式</p>
<ol>
<li>命令行单个安装<br>安装的话针对当前项目和全局也分两种安装，之后的安装路径不同，作用域不同。<ol>
<li>本地安装，package会被下载到当前所在目录，也只能在当前目录下使用。<blockquote>
<p>npm install pkg</p>
</blockquote>
</li>
<li>全局安装，package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。<blockquote>
<p>npm install -g pkg</p>
</blockquote>
</li>
</ol>
</li>
<li>package.json安装<br>如果我们的项目依赖了很多package，可以将项目依赖的包都在package.json这个文件里声明，然后<blockquote>
<p>npm install</p>
</blockquote>
</li>
</ol>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><ol>
<li><p>查看当前目录安装了哪些package</p>
<blockquote>
<p>npm ls</p>
</blockquote>
</li>
<li><p>查看全局安装的模块及依赖</p>
<blockquote>
<p>npm ls -g</p>
</blockquote>
</li>
<li><p>查看特定package的信息</p>
<blockquote>
<p>npm ls pkg</p>
</blockquote>
</li>
<li><p>查看详细信息</p>
<blockquote>
<p>npm info pkg</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始练手gulp的时候就用上了npm，这是促进nodejs繁荣的包管理器，记录下它的一些常用命令以便查阅。&lt;br&gt;node package manager&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://jacean.github.io/categories/web/"/>
    
    
      <category term="npm" scheme="http://jacean.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>bootstrapTable的使用</title>
    <link href="http://jacean.github.io/2016/05/27/bootstrapTable%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://jacean.github.io/2016/05/27/bootstrapTable的使用/</id>
    <published>2016-05-27T06:48:58.000Z</published>
    <updated>2016-05-27T09:56:28.894Z</updated>
    
    <content type="html"><![CDATA[<p>bootstrap是一个很好的前端框架,因为不是专门做前端的,所以一直就有bootstrap来实现页面.<br>基于bootstrap开发的插件组件也很多,这里要说的bootstrapTable就是其中很优秀的一款.<br><a id="more"></a></p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>不需要自己改动源码,然后又不想研究的我一般都直接是用cdn引入.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Latest compiled and minified CSS --&gt;</span><br><span class="line">   &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/bootstrap-table.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Latest compiled and minified JavaScript --&gt;</span><br><span class="line">   &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/bootstrap-table.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Latest compiled and minified Locales --&gt;</span><br><span class="line">   &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/locale/bootstrap-table-zh-CN.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   &lt;!--导出引入--&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/extensions/export/bootstrap-table-export.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=&quot;//rawgit.com/hhurz/tableExport.jquery.plugin/master/tableExport.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基本的使用在bootstraptable的官网和github上都有介绍,以及JSFiddle的在线调试等.<br><a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/documentation/" target="_blank" rel="external">文档</a><br><a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/examples/" target="_blank" rel="external">例子</a><br>可以很容易上手使用,不过给出的例子都是固定的html和css,不方便动态处理,所以我这里就主要说下使用js对table的各种操作.<br>谷歌bootstraptable,这篇<a href="http://www.cnblogs.com/landeanfen/p/4976838.html" target="_blank" rel="external">JS组件系列——表格组件神器：bootstrap table</a>的系列之作应该是最全也最细致的中文博客了,我也是学习这篇博客来用的,所以会看到很多这位博主的代码和结构,原博主如有要求可联系我删除.</p>
<p>table的初始化需要设置数据来源,列字段,分页方式等等,这些都可以利用js来完成.<br>不过在使用js完成前,要先<strong>仔细研读bootstraptable的文档</strong>,熟悉了解要使用的属性或方法的值要求.<br>还有一点,我的数据都是利用ajax来获取的,所以这里的代码都是用提供的默认ajax获取数据的,暂时并没有用到自定义ajax.</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>table的数据显示在table里,所以前端必须有一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>
<p>标签来充当容器以承载数据.</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><blockquote>
<p>columns    -    Array    []    列配置项,详情请查看 列参数 表格.</p>
</blockquote>
<p>如上文档里所述,columns对应的是值数组,所以可声明数组来指定字段.<br>注意数组的成员应该指出field和title.field用来绑定数据字段,title用来做字段的显示名称.<br>bootstraptable有一个特殊字段,该字段可以实现对数据行的单选或多选,所以在有需求的情况下显示指定这个字段的使用与否.<br>我定义的字段数组如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var fieldsarray = Array(&#123;</span><br><span class="line">        checkbox: true</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">            field: &apos;ID&apos;,</span><br><span class="line">            title: &apos;ID&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            field: &apos;ly&apos;,</span><br><span class="line">            title: &apos;留言&apos;</span><br><span class="line">        &#125;);</span><br><span class="line">       </span><br><span class="line">$(&apos;#table&apos;).bootstrapTable(&#123;</span><br><span class="line">   columns: fieldsarray</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>数据可以在html中指定,也可以指定json数据或文件.我使用ajax从后台获取json数据.<br>所以我的初始化就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#table&apos;).bootstrapTable(&#123;</span><br><span class="line">            url: &apos;info_getdata.php&apos;,         //请求后台的URL（*）</span><br><span class="line">            method: &apos;get&apos;,                      //请求方式（*）            </span><br><span class="line">            queryParams: oTableInit.queryParams,//传递参数（*）</span><br><span class="line">            &#125;)</span><br><span class="line">         </span><br><span class="line">...</span><br><span class="line">            </span><br><span class="line">//查询的参数</span><br><span class="line">oTableInit.queryParams = function (params) &#123;</span><br><span class="line">    var temp = &#123;</span><br><span class="line">        limit: params.limit,   //页面大小,这个不用自己手动改的,在启用分页之后,不显示指定页面大小会使用默认大小,然后在查看数据时可以通过选择来调整这个值,这是自动处理的</span><br><span class="line">        offset: params.offset,  //页码,这个和上面的一样,不用自己手动改.</span><br><span class="line">        </span><br><span class="line">        dt: $(&quot;#dt&quot;).val(),         //我用来查询的数据表名称</span><br><span class="line">        search: $(&quot;#search&quot;).val()  //我用来指定分页方式的,客户端或服务端,后边会讲到</span><br><span class="line">    &#125;;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>注意一点,这里的method是get而不是post,我就是刚开始一直使用post然后跪了好久,在issue中看到提供的答案基本都是get就换了一下,结果立马好使了.不太清楚为什么post不行,或是我用的姿势不对.<br>在查询参数这个字段,对应的是一个实现固定接口的函数.文档描述如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">queryParams	data-query-params	Function	function(params) &#123;return params;&#125;	</span><br><span class="line">请求服务器数据时，你可以通过重写参数的方式添加一些额外的参数，例如 toolbar 中的参数 </span><br><span class="line">如果 queryParamsType = &apos;limit&apos; ,返回参数必须包含limit, offset, search, sort, order 否则, 需要包含: pageSize, pageNumber, searchText, sortName,sortOrder. 返回false将会终止请求</span><br></pre></td></tr></table></figure>
<p>所以这里实现了其对应接口,并将必须数据返回.然后bootstraptable就会利用url,method,以及queryParams来使用ajax向后台要取数据.<br>我的后台处理就是利用这几个来获取数据的,具体根据分页方式来做.</p>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>分页有两种,一种是客户端分页,一种是服务端分页.显而易见,客户端分页就是把数据一次性获取,然后在浏览器端利用内存分页,服务端分页就是分批次向服务端要取数据,每次只要一部分.<br>前述查询参数就是为服务端分页所准备的.<br>服务端根据页面大小和偏移量来截取部分数据返回,要注意的是limit和offset就是这个数据部分的起始和结束,bootstraptable已经计算好了.最简单的数据查询的服务端是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//if search==server服务端分页</span><br><span class="line">    $query = &quot;select * from `&quot;.$dt.&quot;` limit &quot;.$offset.&quot;, &quot;.$limit.&quot;&quot;;</span><br><span class="line"></span><br><span class="line">//if search==client客户端分页</span><br><span class="line">    $query = &quot;select * from `&quot;.$dt.&quot;`&quot;;</span><br><span class="line">    </span><br><span class="line">//后台完整PHP</span><br><span class="line">$conn = new mysqlQuery();</span><br><span class="line"></span><br><span class="line">$offset = $_GET[&quot;offset&quot;];</span><br><span class="line">$limit = $_GET[&quot;limit&quot;];</span><br><span class="line">$dt = $_GET[&quot;dt&quot;];</span><br><span class="line">$type = $_GET[&quot;search&quot;];</span><br><span class="line">$results = array();</span><br><span class="line">if ($type == &quot;server&quot;) &#123;</span><br><span class="line">    $query = &quot;select * from `&quot;.$dt.&quot;` limit &quot;.$offset.&quot;, &quot;.$limit.&quot;&quot;;</span><br><span class="line">    $statement = $conn-&gt;dbh-&gt;query($query);</span><br><span class="line"></span><br><span class="line">    while ($row = $statement-&gt;fetch(PDO::FETCH_ASSOC)) &#123;</span><br><span class="line">        $results[] = $row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $fenye = &quot;SELECT count(`ID`) num FROM `&quot;.$dt.&quot;` WHERE 1&quot;;</span><br><span class="line">    $statement = $conn-&gt;dbh-&gt;query($fenye);</span><br><span class="line">    $rownum = $statement-&gt;fetch(PDO::FETCH_ASSOC);</span><br><span class="line">    $total = $rownum[&quot;num&quot;];</span><br><span class="line">    $response = array(&apos;total&apos; =&gt; $total, &apos;rows&apos; =&gt; $results);</span><br><span class="line">&#125;</span><br><span class="line">if($type==&quot;client&quot;)&#123;</span><br><span class="line">    $query = &quot;select * from `&quot;.$dt.&quot;`&quot;;</span><br><span class="line">    $statement = $conn-&gt;dbh-&gt;query($query);</span><br><span class="line"></span><br><span class="line">    while ($row = $statement-&gt;fetch(PDO::FETCH_ASSOC)) &#123;</span><br><span class="line">        $results[] = $row;</span><br><span class="line">    &#125;</span><br><span class="line">    $response =$results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo json_encode($response);</span><br><span class="line">$conn-&gt;close();</span><br></pre></td></tr></table></figure></p>
<p>服务端返回的应该是json格式,这样bootstraptable才能处理.</p>
<p>仔细看PHP代码,可以看到服务端分页和客户端分页返回的json数据是不一样的.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//服务端</span><br><span class="line">    $response = array(&apos;total&apos; =&gt; $total, &apos;rows&apos; =&gt; $results);</span><br><span class="line">//客户端</span><br><span class="line">    $response =$results;</span><br></pre></td></tr></table></figure></p>
<p>当设置为服务端分页的时候,应当返回的是总行数和要显示的行集合.<br>为客户端分页的时候,只需要返回行集合就可.</p>
<p>分页方式的设置方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#table&apos;).bootstrapTable(&#123;</span><br><span class="line">            pagination: true,                   //是否显示分页（*）</span><br><span class="line">            sidePagination: &quot;client&quot;,           //分页方式：client客户端分页，server服务端分页（*）</span><br><span class="line">            pageNumber: 1,                       //初始化加载第一页，默认第一页</span><br><span class="line">            pageSize: 10,                       //每页的记录行数（*）</span><br><span class="line">            pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）</span><br><span class="line">            search: true,                       //是否显示表格搜索，此搜索只能在已有数据内搜索,所以其只对获取了全部数据的客户端分页有意义,而服务端分页没啥用处.</span><br><span class="line">            strictSearch: false,                 //全匹配搜索</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></p>
<p>重要的两个字段就是pagination和sidePagination,指定是否分页和分页方式.<br>客户端分页的缺点自然是若数据量过大,获取数据耗时过长以及对内存的占用,而服务端是每次的轻量级交互则没有这点.<br>不过,在bootstraptable中使用客户端分页会有效益加成,因为数据全部都在,可以做其他的全局操作,比如搜索或是导出.这两个功能对客户端分页的支持很好,但是服务端就不行了.搜索已然鸡肋了,但是导出就会出先各种bug,比如导出方式和数据等等,总之用bootstraptable的export插件就是不好用了,不过这也可能是我使用的姿势不对吧.</p>
<p>提供两种初始化方法,只是分页方式字段稍有不同,其余基本不变就可.<br>初始化函数最终如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">//初始化Table</span><br><span class="line">var TableInit = function () &#123;</span><br><span class="line">    var oTableInit = new Object();</span><br><span class="line">    var fieldsarray = Array(&#123;&#125;);        //字段数组</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      oTableInit.clientInit = function () &#123;</span><br><span class="line">        $(&apos;#table&apos;).bootstrapTable(&apos;destroy&apos;);</span><br><span class="line"></span><br><span class="line">        $(&apos;#table&apos;).bootstrapTable(&#123;</span><br><span class="line">            /************** 参数 ****************/</span><br><span class="line">            url: &apos;info_getdata.php&apos;,         //请求后台的URL（*）</span><br><span class="line">            method: &apos;get&apos;,                      //请求方式（*）</span><br><span class="line">            // ajax:&quot;ajaxRequest&quot;,</span><br><span class="line">            toolbar: &apos;#toolbar&apos;,                //工具按钮用哪个容器</span><br><span class="line">            striped: true,                      //是否显示行间隔色</span><br><span class="line">            cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span><br><span class="line">            pagination: true,                   //是否显示分页（*）</span><br><span class="line">            sortable: false,                     //是否启用排序</span><br><span class="line">            sortOrder: &quot;asc&quot;,                   //排序方式</span><br><span class="line">            queryParams: oTableInit.queryParams,//传递参数（*）</span><br><span class="line">            sidePagination: &quot;client&quot;,           //分页方式：client客户端分页，server服务端分页（*）</span><br><span class="line">            pageNumber: 1,                       //初始化加载第一页，默认第一页</span><br><span class="line">            pageSize: 10,                       //每页的记录行数（*）</span><br><span class="line">            pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）</span><br><span class="line">            search: true,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span><br><span class="line">            strictSearch: false,                 //全匹配搜索</span><br><span class="line">            showRefresh: true,                  //是否显示刷新按钮         </span><br><span class="line">            clickToSelect: true,                //是否启用点击选中行</span><br><span class="line">            height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span><br><span class="line">            uniqueId: &quot;ID&quot;,                     //每一行的唯一标识，一般为主键列</span><br><span class="line">            showToggle: true,                    //是否显示详细视图和列表视图的切换按钮</span><br><span class="line">            cardView: false,                    //是否显示详细视图</span><br><span class="line">            detailView: false,                   //是否显示父子表</span><br><span class="line">            showExport: true,                     //是否显示导出</span><br><span class="line">            //exportDataType: &quot;all&quot;,</span><br><span class="line">            showColumns: true,                  //是否显示所有的列</span><br><span class="line">            columns: fieldsarray,</span><br><span class="line"></span><br><span class="line">            /***************** 事件 *****************/</span><br><span class="line">            onClickRow: function (row, $element) &#123;</span><br><span class="line">                // alert($element);</span><br><span class="line">            &#125;,</span><br><span class="line">            onLoadError: function (data) &#123;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    oTableInit.serverInit = function () &#123;</span><br><span class="line">        $(&apos;#table&apos;).bootstrapTable(&apos;destroy&apos;);      //先销毁旧的重新初始化</span><br><span class="line">        $(&apos;#table&apos;).bootstrapTable(&#123;</span><br><span class="line">            url: &apos;info_getdata.php&apos;,         //请求后台的URL（*）</span><br><span class="line">            method: &apos;get&apos;,                      //请求方式（*）</span><br><span class="line">            queryParams: oTableInit.queryParams,//传递参数（*）</span><br><span class="line">            ...</span><br><span class="line">            sidePagination: &quot;server&quot;,           //分页方式：client客户端分页，server服务端分页（*）</span><br><span class="line">            pageNumber: 1,                       //初始化加载第一页，默认第一页</span><br><span class="line">            pageSize: 10,                       //每页的记录行数（*）</span><br><span class="line">            pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）</span><br><span class="line">            ...</span><br><span class="line">            detailView: false,                   //是否显示父子表</span><br><span class="line">            showExport: false,                     //是否显示导出</span><br><span class="line">            showColumns: true,                  //是否显示所有的列</span><br><span class="line">            columns: fieldsarray</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">     //得到查询的参数</span><br><span class="line">    oTableInit.queryParams = function (params) &#123;</span><br><span class="line">        var temp = &#123;</span><br><span class="line">            limit: params.limit,   //页面大小</span><br><span class="line">            offset: params.offset,  //页码</span><br><span class="line">            dt: $(&quot;#dt&quot;).val(),</span><br><span class="line">            search: $(&quot;#search&quot;).val()</span><br><span class="line">        &#125;;</span><br><span class="line">        return temp;</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line">    return oTableInit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在表格参数中,当名称对应类型是Function的时候,这类就是可以自定义方法的.比如customSort,rowStyle,rowAttributes,根据文档提供的参数和返回值,可以对表格的做出更优秀的展示.</p>
<p>注意下bootstraptable的事件使用.</p>
<blockquote>
<p>Option 事件<br>jQuery 事件<br>参数<br>描述</p>
</blockquote>
<p>仔细研读这些,可以利用事件对整个交互响应做出更好的体验.</p>
<h4 id="动态指定显示列"><a href="#动态指定显示列" class="headerlink" title="动态指定显示列"></a>动态指定显示列</h4><p>因为我是从不同的表里获取数据,其字段也有不同之处,所以每次查询的时候都需要根据表重新指定字段,采用bootstrapTable的方法来指定刷新.<br>$(“#dt”)是我的表名.我选取了全部的字段,在查每个不同的表时隐藏掉自己没有的字段.这办法是土了点,但是因为要指定标题所以只好这样了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function setColumns(params) &#123;</span><br><span class="line"></span><br><span class="line">    //此方法不存在了</span><br><span class="line">    // $(&quot;#table&quot;).bootstrapTable(&apos;showAllColumns&apos;);</span><br><span class="line"></span><br><span class="line">    /************* 设置列动态显示变化 ******************/</span><br><span class="line">    switch ($(&quot;#dt&quot;).val()) &#123;       </span><br><span class="line">        case &apos;fx_zn&apos;:</span><br><span class="line">            $(&quot;#table&quot;).bootstrapTable(&apos;hideColumn&apos;, &apos;zp&apos;);</span><br><span class="line">            ...</span><br><span class="line">            $(&quot;#table&quot;).bootstrapTable(&apos;hideColumn&apos;, &apos;fj&apos;);</span><br><span class="line">            break;</span><br><span class="line">        case &apos;jn_per&apos;:</span><br><span class="line">            $(&quot;#table&quot;).bootstrapTable(&apos;hideColumn&apos;, &apos;dw&apos;);</span><br><span class="line">            ...</span><br><span class="line">            $(&quot;#table&quot;).bootstrapTable(&apos;hideColumn&apos;, &apos;fwb&apos;);</span><br><span class="line">            break;</span><br><span class="line">        ...</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    $(&quot;#table&quot;).bootstrapTable(&apos;refresh&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里看一下bootstraptable的方法.</p>
<blockquote>
<p>使用方法的语法：$(‘#table’).bootstrapTable(‘method’, parameter);。</p>
</blockquote>
<p>在文档里可以看到其方法列表,仔细研读方法参数和描述来合理使用方法.</p>
<h4 id="控件绑定"><a href="#控件绑定" class="headerlink" title="控件绑定"></a>控件绑定</h4><p>这套初始化逻辑都是用的那位博主的,感觉还好.<br>在控件初始化中,将table事件和控件事件绑定.<br>比如我有切换客户端分页和服务端分页的select,选择查询不同表的select,以及服务端分页时手动的导出.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var ControlInit = function () &#123;</span><br><span class="line">    var oInit = new Object();</span><br><span class="line">    var postdata = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    oInit.Init = function () &#123;</span><br><span class="line">        // 初始化控件事件  </span><br><span class="line">        //根据不同表隐藏显示不同字段列      </span><br><span class="line">        $(&quot;#dt&quot;).change(function () &#123;</span><br><span class="line">            setColumns();</span><br><span class="line">        &#125;);</span><br><span class="line">        //根据查询方式不同选择不同的初始化方式,忽略search这个名字,本来不是用来干这个的,忘了改了,type</span><br><span class="line">        $(&quot;#search&quot;).change(function () &#123;</span><br><span class="line">            if ($(&quot;#search&quot;).val() == &quot;client&quot;) &#123;</span><br><span class="line">                var oTable = new TableInit();</span><br><span class="line">                oTable.clientInit();</span><br><span class="line">                </span><br><span class="line">                //工具条变化</span><br><span class="line">                $(&quot;#clientexport&quot;).show();</span><br><span class="line">                $(&quot;#serverexport&quot;).hide();</span><br><span class="line">                </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                var oTable = new TableInit();</span><br><span class="line">                oTable.serverInit();</span><br><span class="line">                </span><br><span class="line">                //工具条变化</span><br><span class="line">                $(&quot;#clientexport&quot;).hide();</span><br><span class="line">                $(&quot;#serverexport&quot;).show();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            setColumns();</span><br><span class="line">            $(&quot;#table&quot;).bootstrapTable(&apos;refresh&apos;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(&quot;#serverexport&quot;).click(function () &#123;</span><br><span class="line">            window.open(&quot;info_export.php?dt=&quot; + $(&quot;#dt&quot;).val());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return oInit;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="工具条"><a href="#工具条" class="headerlink" title="工具条"></a>工具条</h4><p>根据分页方式的不同,工具条内容变化,控制方式在上一小节的控件事件绑定中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;toolbar&quot; class=&quot;btn-group&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--bootstrapTable的导出功能客户端分页使用--&gt;</span><br><span class="line">    &lt;select id=&quot;clientexport&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;&quot;&gt;导出当前页&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;all&quot;&gt;导出全部&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;selected&quot;&gt;导出选中项&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--bootstrap导出end--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;button id=&quot;serverexport&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; style=&quot;display:none;&quot;&gt;导出Excel&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="初始化表格"><a href="#初始化表格" class="headerlink" title="初始化表格"></a>初始化表格</h4><p>在页面加载时执行初始化操作,把以上设置应用到表格上.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line"></span><br><span class="line">    //1.初始化Table,采用客户端初始化，在页面设计中配套默认全部获取.我在控件初始化时做了这一步,所以这一段可以咔嚓的.</span><br><span class="line">    var oTable = new TableInit();</span><br><span class="line">    oTable.clientInit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //2.初始化Button的点击事件</span><br><span class="line">    var oControlInit = new ControlInit();</span><br><span class="line">    oControlInit.Init();</span><br><span class="line">    </span><br><span class="line">    // 绑定选择导出类型,这个可在扩展export的例子中找到,介绍的很详细</span><br><span class="line">    $(&apos;#toolbar&apos;).find(&apos;select&apos;).change(function () &#123;</span><br><span class="line">        $(&apos;#table&apos;).bootstrapTable(&apos;refreshOptions&apos;, &#123;</span><br><span class="line">            exportDataType: $(this).val()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    setColumns();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>暂且记录到此,bootstraptable还有很多好玩的可以玩,之后用到再补充.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bootstrap是一个很好的前端框架,因为不是专门做前端的,所以一直就有bootstrap来实现页面.&lt;br&gt;基于bootstrap开发的插件组件也很多,这里要说的bootstrapTable就是其中很优秀的一款.&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jacean.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="bootstrap" scheme="http://jacean.github.io/tags/bootstrap/"/>
    
      <category term="html" scheme="http://jacean.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>HTML使用input上传文件类型限制</title>
    <link href="http://jacean.github.io/2016/05/27/HTML%E4%BD%BF%E7%94%A8input%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E9%99%90%E5%88%B6/"/>
    <id>http://jacean.github.io/2016/05/27/HTML使用input上传文件类型限制/</id>
    <published>2016-05-27T06:39:41.000Z</published>
    <updated>2016-05-27T06:48:25.855Z</updated>
    
    <content type="html"><![CDATA[<p>在上传文件的时候,我们经常会有特定的文件需求,比如只要word,或是excel,jpeg等等,这个是可以在前端的input来直接进行限制的.<br><a id="more"></a><br>在stackoverflow上找到的答案<a href="http://stackoverflow.com/questions/11832930/html-input-file-accept-attribute-file-type-csv" target="_blank" rel="external">HTML Input=“file” Accept Attribute File Type (CSV)</a>.<br>对各种文件的input限制详细描述:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Valid Accept Types:</span><br><span class="line"></span><br><span class="line">For CSV files (.csv), use: </span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;.csv&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For Excel Files 97-2003 (.xls), use: </span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;application/vnd.ms-excel&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For Excel Files 2007+ (.xlsx), use: </span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For Text Files (.txt) use: </span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;text/plain&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For Image Files (.png/.jpg/etc), use: </span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;image/*&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For HTML Files (.htm,.html), use:</span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;text/html&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For Video Files (.avi, .mpg, .mpeg, .mp4), use:</span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;video/*&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For Audio Files (.mp3, .wav, etc), use:</span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;audio/*&quot; /&gt;</span><br><span class="line"></span><br><span class="line">For PDF Files, use:</span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;.pdf&quot; /&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTE:</span><br><span class="line"></span><br><span class="line">If you are trying to display Excel CSV files (.csv), do NOT use:</span><br><span class="line"></span><br><span class="line">text/csv</span><br><span class="line">application/csv</span><br><span class="line">text/comma-separated-values (works in Opera only).</span><br><span class="line">If you are trying to display a particular file type (for example, a WAV or PDF), then this will almost always work...</span><br><span class="line"></span><br><span class="line"> &lt;input type=&quot;file&quot; accept=&quot;.FILETYPE&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上传文件的时候,我们经常会有特定的文件需求,比如只要word,或是excel,jpeg等等,这个是可以在前端的input来直接进行限制的.&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jacean.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://jacean.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>ajax提交含文件表单</title>
    <link href="http://jacean.github.io/2016/05/27/ajax%E6%8F%90%E4%BA%A4%E5%90%AB%E6%96%87%E4%BB%B6%E8%A1%A8%E5%8D%95/"/>
    <id>http://jacean.github.io/2016/05/27/ajax提交含文件表单/</id>
    <published>2016-05-27T06:17:34.000Z</published>
    <updated>2016-05-27T06:37:54.849Z</updated>
    
    <content type="html"><![CDATA[<p>使用ajax和后台交换数据是web开发中常用的手段,jquery也提供了很方便的使用方法.如$.ajax()等.<br>但是,交换的数据经常是表单,当表单中有文件的时候,普通的ajax手段就不好使了.这时候,可以使用formdata来进行文件的ajax.</p>
<a id="more"></a>
<p>在使用ajax和后台传递数据的时候,因为要上传文件,所以在后台php处用了$_FILES[“file”],但是提示错误”未定义index下标”,一想才记起ajax是不能传递文件信息的.<br>无效代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">            cache: true,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&apos;infowrite.php&apos;,</span><br><span class="line">            data:$(&apos;#infoform&apos;).serialize(),// 你的formid</span><br><span class="line">            async: false,</span><br><span class="line">            error: function(request) &#123; </span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            dataType: &quot;json&quot;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<p>决定采用formdata,先对表单进行处理,创建FormData对象.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var fd = new FormData(document.getElementById(&quot;fileinfo&quot;));</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">            cache: true,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&apos;infowrite.php&apos;,</span><br><span class="line">            data:fd,</span><br><span class="line">            async: false,</span><br><span class="line">            processData: false,  // 告诉jQuery不要去处理发送的数据</span><br><span class="line">            contentType: false,   // 告诉jQuery不要去设置Content-Type请求头</span><br><span class="line">            error: function(request) &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            dataType: &quot;json&quot;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样改正之后,在后台页面就可以接收file信息,使用$_FILES这个全局数组了.</p>
<p>除了将从form创建formdata外,也可以先创建空formdata,然后使用append等手动添加字段.<br>更多对formdata的使用,还是参见官方文档比较靠谱,我就不乱说了.<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Using_FormData_Objects" target="_blank" rel="external">使用FormData对象</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用ajax和后台交换数据是web开发中常用的手段,jquery也提供了很方便的使用方法.如$.ajax()等.&lt;br&gt;但是,交换的数据经常是表单,当表单中有文件的时候,普通的ajax手段就不好使了.这时候,可以使用formdata来进行文件的ajax.&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://jacean.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="http://jacean.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>gulp入门和基本配置</title>
    <link href="http://jacean.github.io/2016/05/20/gulp%E5%85%A5%E9%97%A8%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://jacean.github.io/2016/05/20/gulp入门和基本配置/</id>
    <published>2016-05-20T12:25:55.000Z</published>
    <updated>2016-05-27T10:01:39.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gulpConfig"><a href="#gulpConfig" class="headerlink" title="gulpConfig"></a>gulpConfig</h1><p>前端项目使用gulp构建能带来很大的便利性，通过gulp的构建，我也进一步组织优化了项目的文件结构，以期形成一套前端开发模板结构，给开发和维护带来方便。<br>此项目持续更新gulp的插件任务和项目结构优化。<br><a href="git@github.com:jacean/gulpConfig.git">gulpConfig</a><br><a id="more"></a></p>
<h2 id="projectStruct"><a href="#projectStruct" class="headerlink" title="projectStruct:"></a>projectStruct:</h2><p>暂定项目结构如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">|--dist/                                项目编译后的目标文件</span><br><span class="line">    |--progectVersion/                      根据版本号编译不同版本</span><br><span class="line">        |--css/                                 所有css文件</span><br><span class="line">        |--image/                               所有图片文件</span><br><span class="line">        |--js/                                  所有js文件</span><br><span class="line">        |--view/                                所有html文件</span><br><span class="line">|--gulp/                                gulp任务执行所需</span><br><span class="line">    |--tasks/                               gulp针对特定类型的任务</span><br><span class="line">        |--less.js</span><br><span class="line">        |--...</span><br><span class="line">    |--util/                                通用工具模块</span><br><span class="line">        |--handleErrors.js                      错误处理</span><br><span class="line">        |--...</span><br><span class="line">    |--config.js                            gulp任务所需和路径配置</span><br><span class="line">|--node_modules/                        gulp模块文件夹</span><br><span class="line">|--src/                                 项目开发中的原始文件 </span><br><span class="line">    |--image/                               所有图片文件</span><br><span class="line">    |--less/                                所有less文件</span><br><span class="line">    |--js/                                  所有js文件</span><br><span class="line">    |--view/                                所有html文件</span><br><span class="line">|--gulpfile.js                          gulp入口js</span><br><span class="line">|--package.json                         gulp项目信息和包管理文件</span><br><span class="line">|--README.md                            readme</span><br></pre></td></tr></table></figure></p>
<h2 id="gulpTask"><a href="#gulpTask" class="headerlink" title="gulpTask"></a>gulpTask</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|--tasks/</span><br><span class="line">    |--clean.js                         清空编译目标文件夹</span><br><span class="line">    |--default.js                       默认任务，依次启动各个任务最后启动监视</span><br><span class="line">    |--html.js                          压缩html文件</span><br><span class="line">    |--imagemin.js                      图片压缩</span><br><span class="line">    |--less.js                          编译less</span><br><span class="line">    |--script.js                        压缩js</span><br><span class="line">    |--watch.js                         监视项目变动</span><br></pre></td></tr></table></figure>
<h2 id="gulp部署"><a href="#gulp部署" class="headerlink" title="gulp部署"></a>gulp部署</h2><h3 id="安装全局gulp"><a href="#安装全局gulp" class="headerlink" title="安装全局gulp"></a>安装全局gulp</h3><blockquote>
<p>npm install -g gulp</p>
</blockquote>
<p>在提示信息中可以看到自己的安装路径、版本等</p>
<h3 id="init初始化项目"><a href="#init初始化项目" class="headerlink" title="init初始化项目"></a>init初始化项目</h3><ol>
<li><p>新建项目文件夹。<br> 我当前的工作环境是win10，所以在我的D:/xampp/htdocs/下新建了gulpConfig文件夹。</p>
</li>
<li><p>在gulpConfig目录下打开命令行</p>
<blockquote>
<p>npm init</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">name: (gulpConfig) gulpConfig</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: 学习gulp在前端开发中的应用</span><br><span class="line">entry point: (gulpfile.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author: jacean</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to D:\xampp\htdocs\gulpStart\package.json:</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;: &quot;gulpStart&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;学习gulp在前端开发中的应用&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;gulpfile.js&quot;,  </span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;jacean&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) yes</span><br></pre></td></tr></table></figure>
<p>init命令如提示所言</p>
<blockquote>
<p>This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sane defaults.</p>
<p>See <code>npm help json</code> for definitive documentation on these fields<br>and exactly what they do.</p>
<p>Use <code>npm install &lt;pkg&gt; --save</code> afterwards to install a package and<br>save it as a dependency in the package.json file.</p>
</blockquote>
<p>初始化项目文件夹和项目信息，就是帮助完成package.json文件生成格式化的项目信息，还有指定入口模块gulpfile.js,。<br>咱们也可以自己手动建立package.json文件。注意上面提示第三段，使用”npm install <pkg> –save”会把插件信息写入到packages.json中，所以咱们手动建立的package.json一定要是json格式的，可别空白了。如果不想输入其他版权信息啥的，可以只写入”{}”,空白的大括号。</pkg></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>然后执行如下命令，安装插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br><span class="line">npm install --save-dev gulp-less</span><br><span class="line">npm install --save-dev gulp-watch</span><br><span class="line">npm install --save-dev require-dir</span><br><span class="line">npm install --save-dev require-dir</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>npm install –save 与 npm install –save-dev 的区别<br>    –save-dev放在devDependencies里面，开发模式用devDep<br>    –save放在package.json 的dependencies，产品模式用dependencies </p>
</blockquote>
<p>安装完毕node模块，可见文件夹下多了node_modules子文件夹，同时package.json发生了变化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</span><br><span class="line">    &quot;gulp-less&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;gulp-watch&quot;: &quot;^4.3.5&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h3><p>详细配置参见此项目文件。</p>
<h4 id="初试"><a href="#初试" class="headerlink" title="初试"></a>初试</h4><p>在gulpfile.js中添加打印hello任务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp=<span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="comment">//创建任务</span></span><br><span class="line">gulp.task(<span class="string">"hello"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册默认任务</span></span><br><span class="line">gulp.task(<span class="string">"default"</span>,[<span class="string">'hello'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>在命令行执行<em>gulp</em>就会执行默认任务hello。也可以在命令行输入<em>gulp hello</em>直接启动hello任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\xampp\htdocs\gulpStart&gt;gulp</span><br><span class="line">[13:16:10] Using gulpfile D:\xampp\htdocs\gulpStart\gulpfile.js</span><br><span class="line">[13:16:10] Starting &apos;hello&apos;...</span><br><span class="line">你好</span><br><span class="line">[13:16:10] Finished &apos;hello&apos; after 1.54 ms</span><br><span class="line">[13:16:10] Starting &apos;default&apos;...</span><br><span class="line">[13:16:10] Finished &apos;default&apos; after 17 μs</span><br></pre></td></tr></table></figure></p>
<h4 id="任务结构"><a href="#任务结构" class="headerlink" title="任务结构"></a>任务结构</h4><h5 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h5><p>gulp执行任务的入口是gulpfile.js，这个是一句package.json的”main”字段定义的</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;gulpConfig&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">&quot;description&quot;: &quot;学习gulp在前端开发中的应用&quot;,</span><br><span class="line">&quot;main&quot;: &quot;gulpfile.js&quot;,</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="任务分离"><a href="#任务分离" class="headerlink" title="任务分离"></a>任务分离</h5><p>为以后维护方便，可将gulp任务单独放在文件夹里按功能分类,将入口导向至功能文件处。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//gulpfile.js</span><br><span class="line">var requireDir = require(&apos;require-dir&apos;);</span><br><span class="line">requireDir(&apos;./gulp/tasks&apos;, &#123; recurse: true&#125;);</span><br></pre></td></tr></table></figure>
<p>在项目根目录下新建gulp文件夹，建立子文件夹tasks和util，分别放置针对特定类型的功能模块和通用功能模块，新建配置文件config.js.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gulpConfig/</span><br><span class="line">    |--gulp/                                gulp任务执行所需</span><br><span class="line">        |--tasks/                               gulp针对特定类型的任务</span><br><span class="line">            |--less.js</span><br><span class="line">            |--...</span><br><span class="line">        |--util/                                通用工具模块</span><br><span class="line">            |--handleErrors.js                      错误处理</span><br><span class="line">            |--...</span><br><span class="line">        |--config.js                            gulp任务所需和路径配置</span><br></pre></td></tr></table></figure>
<p>config.js里统一设置源路径和编译路径，传出各个任务所需配置。</p>
<h5 id="插件功能设置"><a href="#插件功能设置" class="headerlink" title="插件功能设置"></a>插件功能设置</h5><p>以less为例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//config.js</span><br><span class="line"></span><br><span class="line">var src = &apos;./src&apos;;</span><br><span class="line">var dest = &apos;./dist/&apos;+config.name+&quot;-&quot;+config.version+&apos;/&apos;;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    less: &#123;</span><br><span class="line">        all: src + &quot;/less/**/*.less&quot;,  //所有less</span><br><span class="line">        src: src + &quot;/less/*.less&quot;,     //需要编译的less</span><br><span class="line">        dest: dest + &quot;/css&quot;,　　　　　　 //输出目录</span><br><span class="line">        settings: &#123;　　　　　　　　　　　 //编译less过程需要的配置，可以为空</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//less.js</span><br><span class="line"></span><br><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var less = require(&apos;gulp-less&apos;);</span><br><span class="line">var config = require(&apos;../config&apos;).less;</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;less&apos;, function()&#123;</span><br><span class="line">    return gulp.src(config.src)         //less源文件</span><br><span class="line">        .pipe(less(config.settings))    //执行编译</span><br><span class="line">        .pipe(gulp.dest(config.dest));   //输出目录</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其他插件功能也如此，在维护更改和变动的时候会有很大方便，整个结构和功能也很清晰。</p>
<h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><p>gulp的任务系统是基于orchestrator的，提供的事件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// FRAGILE: ASSUME: this list is an exhaustive list of events emitted</span><br><span class="line">var events = [&apos;start&apos;,&apos;stop&apos;,&apos;err&apos;,&apos;task_start&apos;,&apos;task_stop&apos;,&apos;task_err&apos;,&apos;task_not_found&apos;,&apos;task_recursion&apos;];</span><br></pre></td></tr></table></figure>
<p>监听方法如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">gulp.task(&apos;default&apos;,function()&#123;</span><br><span class="line">    return gulp.src(&apos;./**/*.*&apos;)</span><br><span class="line">    .pipe()</span><br><span class="line">&#125;).on(&apos;task_start&apos;,function()&#123;</span><br><span class="line">    console.log(&apos;start&apos;);</span><br><span class="line">&#125;).on(&apos;task_err&apos;,function(err)&#123;</span><br><span class="line">    console.log(&apos;error&apos;);</span><br><span class="line">&#125;).on(&apos;task_stop&apos;,function()&#123;</span><br><span class="line">    console.log(&apos;stop&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>把错误消息通知出来又不中断gulp监听，我们需要安装gulp-notify。<br>然后，在gulp文件夹下的util内新建handleErrors.js文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//handleErrors.js</span><br><span class="line"></span><br><span class="line">var notify = require(&quot;gulp-notify&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = function()&#123;</span><br><span class="line"></span><br><span class="line">    var args = Array.prototype.slice.call(arguments);</span><br><span class="line"></span><br><span class="line">    notify.onError(&#123;</span><br><span class="line">        title: &quot;Error running something&quot;,</span><br><span class="line">        message: &apos;Error: &lt;%=error %&gt;&apos;</span><br><span class="line">    &#125;).apply(this, args);//替换为当前对象</span><br><span class="line"></span><br><span class="line">    this.emit();//提交</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后在功能任务中引入此模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//script.js</span><br><span class="line"></span><br><span class="line">var handleErrors = require(&apos;../util/handleErrors&apos;);</span><br><span class="line">gulp.task(&apos;script&apos;, function()&#123;</span><br><span class="line">    return gulp.src(config.src)        </span><br><span class="line">        .pipe(uglify())</span><br><span class="line">         .on(&apos;error&apos;,handleErrors)</span><br><span class="line">        .pipe(gulp.dest(config.dest)) ; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样当任务出错的时候会弹出提示，但是gulp还会继续监听。</p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gulp-imagemin:    压缩图片</span><br><span class="line">        imagemin-jpeg-recompress  optipng-bin</span><br><span class="line">gulp-ruby-sass:   支持sass，安装此版本需要安装ruby</span><br><span class="line">gulp-minify-css:  压缩css</span><br><span class="line">gulp-jshint:        检查js</span><br><span class="line">gulp-uglify:        压缩js</span><br><span class="line">gulp-concat:      合并文件</span><br><span class="line">gulp-rename:      重命名文件</span><br><span class="line">gulp-htmlmin:     压缩html</span><br><span class="line">gulp-clean:       清空文件夹</span><br><span class="line">gulp-notify：     错误消息处理</span><br><span class="line">gulp-utf8-convert:将文件转换成utf-8</span><br><span class="line">gulp-livereload:  服务器控制客户端同步刷新（需配合chrome插件LiveReload及tiny-lr）</span><br></pre></td></tr></table></figure>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>引入gulp-imagemin插件的时候报错</p>
<blockquote>
<p>D:\xampp\htdocs\gulpStart\node_modules\gulp-imagemin\index.js:2<br> const path = require(‘path’);<br> ^^^^^<br> SyntaxError: Use of const in strict mode.</p>
</blockquote>
<p> 原因是nodejs版本太低，我原本的版本是vs2015自带node，0.x.x，更新后v4.4.4</p>
</li>
<li><p>notify插件提示乱码<br> 这多是控制台不支持utf-8的缘故，控制台默认中文编码是GBK，可以执行</p>
<blockquote>
<p>CHCP 65001</p>
</blockquote>
<p> 将控制台编码改为UTF-8,就可以正常显示了。</p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>学习配置中多方参考，有些文章在学习中即看即关，最后留下了这几个。<br>如果有发现我这里引用参考了您的文章，还请勿怪，留言提醒博主加上。<br>结构参考，代码引用:<a href="http://www.cnblogs.com/1wen/p/4533608.html" target="_blank" rel="external">前端们，gulp该用起来了，简单的demo入门——gulp系列（一）</a><br><a href="http://www.cnblogs.com/1wen/p/4552485.html" target="_blank" rel="external">gulp-notify处理报错—-gulp系列（二)</a><br><a href="http://www.jianshu.com/p/f151eccc10e6" target="_blank" rel="external">前端自动化Gulp实际使用</a><br><a href="http://www.dbpoo.com/getting-started-with-gulp/" target="_blank" rel="external">Gulp安装及配合组件构建前端开发一体化</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;gulpConfig&quot;&gt;&lt;a href=&quot;#gulpConfig&quot; class=&quot;headerlink&quot; title=&quot;gulpConfig&quot;&gt;&lt;/a&gt;gulpConfig&lt;/h1&gt;&lt;p&gt;前端项目使用gulp构建能带来很大的便利性，通过gulp的构建，我也进一步组织优化了项目的文件结构，以期形成一套前端开发模板结构，给开发和维护带来方便。&lt;br&gt;此项目持续更新gulp的插件任务和项目结构优化。&lt;br&gt;&lt;a href=&quot;git@github.com:jacean/gulpConfig.git&quot;&gt;gulpConfig&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://jacean.github.io/categories/web/"/>
    
    
      <category term="gulp" scheme="http://jacean.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>PDO在mysql中的应用</title>
    <link href="http://jacean.github.io/2016/05/07/PDO%E5%9C%A8mysql%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://jacean.github.io/2016/05/07/PDO在mysql中的应用/</id>
    <published>2016-05-07T14:26:41.000Z</published>
    <updated>2016-05-07T14:29:47.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库抽象层PDO"><a href="#数据库抽象层PDO" class="headerlink" title="数据库抽象层PDO"></a>数据库抽象层PDO</h2><p>在如今各种数据库方案之中,开发人员除了选择其中一种来开发,也需要在不同的数据库之间进行移植,这种跨数据库处理,就提出了一种需求:”数据库抽象层”.它能够解除应用程序逻辑与数据库通信逻辑之间的耦合,通过通用接口传递所有与数据库相关的命令,使得应用程序可以使用多种数据库解决方案.<br>PDO就是一个”数据库访问抽象层”,统一了各种数据库的访问接口,这样一来,大大提升了程序的可移植性,而且具有较高的效率.对于数据库的操作,需要针对特定数据库的PDO驱动程序,这个驱动程序就是承载通信的桥梁,而只有在运行时PDO才加载必须的数据库驱动程序,大大提高了其灵活性.在不同数据库间切换时,只需要重新加载驱动就行.<br><a id="more"></a><br>PDO在现在的php中已经默认编译了，同时默认支持了mysql和sqlite。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extension=php_pdo_mysql.dll</span><br><span class="line">;extension=php_pdo_oci.dll</span><br><span class="line">;extension=php_pdo_odbc.dll</span><br><span class="line">;extension=php_pdo_pgsql.dll</span><br><span class="line">extension=php_pdo_sqlite.dll</span><br></pre></td></tr></table></figure></p>
<p>可以自行添加支持，比如对MSSQL，Oracle的。</p>
<h2 id="PDO基本使用"><a href="#PDO基本使用" class="headerlink" title="PDO基本使用"></a>PDO基本使用</h2><p>以mysql数据库为例。<br>首先，声明一下配置文件mysql_config.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//定义常量  </span><br><span class="line">define(&apos;DB_HOST&apos;, &apos;IP&apos;);  </span><br><span class="line">define(&apos;DB_USER&apos;, &apos;wanjq&apos;);  </span><br><span class="line">define(&apos;DB_PASS&apos;, &apos;wanjq&apos;);  </span><br><span class="line">define(&apos;DB_DATABASENAME&apos;, &apos;test&apos;);</span><br></pre></td></tr></table></figure></p>
<p>然后来看看基本使用。</p>
<h3 id="创建PDO对象"><a href="#创建PDO对象" class="headerlink" title="创建PDO对象"></a>创建PDO对象</h3><p>针对不同的数据库，PDO对象在初始化时是不一样的，而不一样就表现在数据源名dsn，是PDO构造函数的第一个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once(&quot;mysql_config.php&quot;);</span><br><span class="line">$dsn=&apos;mysql:dbname=&apos;.DB_DATABASENAME.&apos;;host=&apos;.DB_HOST;</span><br><span class="line">$user=DB_USER;</span><br><span class="line">$password=DB_PASS;</span><br><span class="line"></span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    $dbh=new PDO($dsn,$user,$password);</span><br><span class="line">    </span><br><span class="line">&#125;catch(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;connect error:&quot;.$e-&gt;getMessage();</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除了以上3个参数，还有第四个参数，是一个数组，用于设置连接所需的额外选项。这里暂不表。</p>
<h3 id="PDO执行SQL语句"><a href="#PDO执行SQL语句" class="headerlink" title="PDO执行SQL语句"></a>PDO执行SQL语句</h3><p>PDO执行sql与数据库交互有3种不同的策略。依次来看。</p>
<h4 id="PDO-exec"><a href="#PDO-exec" class="headerlink" title="PDO::exec()"></a>PDO::exec()</h4><p>此方法就是执行语句了，常用于不需要返回结果集的操作，比如insert，delete，update。此方法不能用于执行select。其返回的是受影响的行数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$query=&quot;insert into users (NAME,TEL,SEX) values (&apos;wanjq&apos;,&apos;187&apos;,&apos;man&apos;)&quot;;</span><br><span class="line">$affected=$dbh-&gt;exec($query);</span><br><span class="line">if($affected)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;ok,affected num:&quot;.$affected;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    print_r($dbh-&gt;errorInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="PDO-query"><a href="#PDO-query" class="headerlink" title="PDO::query()"></a>PDO::query()</h4><p>此方法常用语select，返回一个PDOStatement对象。要获得行数，可通过PDO对象的rowCount()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$dbcolarray = array(&apos;NAME&apos;, &apos;TEL&apos;,&apos;SEX&apos;);  </span><br><span class="line">$query=&quot;select * from users&quot;;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    $pdostatement=$dbh-&gt;query($query);</span><br><span class="line">    echo &quot;all records:&quot;.$pdostatement-&gt;rowCount();</span><br><span class="line">    foreach ($pdostatement as $row) &#123;</span><br><span class="line">        $tdstr=&quot;&quot;;</span><br><span class="line">        foreach ($dbcolarray as $td)  </span><br><span class="line">        $tdstr .= &quot;$row[$td]\t&quot;;  </span><br><span class="line">        echo $tdstr.&quot;\n&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;catch(PDOException $e)&#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">    print_r($dbh-&gt;errorInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="PDO-prepare和PDOStatement-execute"><a href="#PDO-prepare和PDOStatement-execute" class="headerlink" title="PDO::prepare和PDOStatement::execute()"></a>PDO::prepare和PDOStatement::execute()</h4><p>使用占位符(?)语法将变量绑定到SQL语句中的预处理语句，与mysqli扩展的支持类似。PDO对所支持的所有数据库都提供了预处理语句和绑定参数，以便不必关注数据库平台而进行企业级开发。</p>
<h5 id="PDOStatement对象"><a href="#PDOStatement对象" class="headerlink" title="PDOStatement对象"></a>PDOStatement对象</h5><p>通过PDO::query()返回的PDOStatement是一个结果集对象，但是通过prepare()方法返回的则是一个查询对象。</p>
<h5 id="准备语句"><a href="#准备语句" class="headerlink" title="准备语句"></a>准备语句</h5><p>预处理是使用占位符，准备好一个并不需要立即执行的sql查询语句，然后根据不同的执行需求改变列值。编译一次，多次执行，会在服务器上缓存查询的语法和执行过程。<br>PDO提供两种占位符</p>
<ol>
<li><p>命名参数</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dbh-&gt;prepare(&quot;insert into &quot;.DB_TABLENAME.&quot; (NAME,TEL,SEX) values(:var1,:var2,:var3)&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>问号</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dbh-&gt;prepare(&quot;insert into &quot;.DB_TABLENAME.&quot; (NAME,TEL,SEX) values(?,?,?)&quot;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="绑定参数"><a href="#绑定参数" class="headerlink" title="绑定参数"></a>绑定参数</h5><p>bindParam(param1,param2[,,,]);<br>第一个参数必选，作为绑定索引。针对命名参数和问号索引有不同形式。第二个参数为占位符的值。</p>
<ol>
<li><p>命名参数</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> $stmt=$dbh-&gt;prepare(&quot;insert into &quot;.DB_TABLENAME.&quot; (NAME,TEL,SEX) values(:NAME,:TEL,:SEX)&quot;);</span><br><span class="line">$name=&quot;wanjq&quot;;</span><br><span class="line">$tel=&quot;199&quot;;</span><br><span class="line">$sex=&quot;man&quot;;</span><br><span class="line">//第一个参数是命名参数的名字字符串，第二个参数是占位符值得引用传递。</span><br><span class="line">//**此处只能是引用传递，不能直接提供数值**</span><br><span class="line">$stmt-&gt;bindParam(&apos;:NAME&apos;,$name);</span><br><span class="line">$stmt-&gt;bindParam(&apos;:TEL&apos;,$tel);</span><br><span class="line">$stmt-&gt;bindParam(&apos;:SEX&apos;,$sex);</span><br></pre></td></tr></table></figure>
</li>
<li><p>问号</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$stmt=$dbh-&gt;prepare(&quot;insert into &quot;.DB_TABLENAME.&quot; (NAME,TEL,SEX) values(?,?,?)&quot;);</span><br><span class="line">$name=&quot;wanjq&quot;;</span><br><span class="line">$tel=&quot;199&quot;;</span><br><span class="line">$sex=&quot;man&quot;;</span><br><span class="line">//第一个参数是索引偏移量，第二个同样是占位符值得引用传递</span><br><span class="line">$stmt-&gt;bindParam(1,$name);</span><br><span class="line">$stmt-&gt;bindParam(2,$tel);</span><br><span class="line">$stmt-&gt;bindParam(3,$sex);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h5><p>只需要执行execute方法就好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$stmt=$dbh-&gt;prepare(&quot;insert into &quot;.DB_TABLENAME.&quot; (NAME,TEL,SEX) values(?,?,?)&quot;);</span><br><span class="line">$name=&quot;wanjq&quot;;</span><br><span class="line">$tel=&quot;199&quot;;</span><br><span class="line">$sex=&quot;man&quot;;</span><br><span class="line">$stmt-&gt;bindParam(1,$name);</span><br><span class="line">$stmt-&gt;bindParam(2,$tel);</span><br><span class="line">$stmt-&gt;bindParam(3,$sex);</span><br><span class="line">$stmt-&gt;execute();</span><br></pre></td></tr></table></figure></p>
<p>除此之外，有一种针对大量占位符的简写，利用命名参数形成数组，能够省去bindParam的调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$stmt=$dbh-&gt;prepare(&quot;insert into &quot;.DB_TABLENAME.&quot; (NAME,TEL,SEX) values(:NAME,:TEL,:SEX)&quot;);</span><br><span class="line">$stmt-&gt;execute(array(&apos;:NAME&apos; =&gt; &quot;wanjq&quot;,&apos;:TEL&apos; =&gt; &quot;120&quot;,&apos;:SEX&apos; =&gt; &quot;man&quot;));</span><br></pre></td></tr></table></figure></p>
<h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>事务是确保数据库一致的机制，是一个或一系列的查询，作为一个单元的一组有序的数据库操作。如果组中所有sql语句执行成功则事务成功，事务被提交，否则事务不成功，被回滚，该事务操作取消。<br>事务的四个特征：</p>
<ol>
<li>原子性</li>
<li>一致性</li>
<li>独立性</li>
<li>持久性</li>
</ol>
<p>不过，mysql数据库中，只有InnoDb和BDB支持事务操作，而InnoDB的性能要比BDB好很多，所以在建表的时候需要显示指定类型为InnoDb。<br>在执行事务前需要关闭自动提交autocommit。事务执行完毕成功后，再commit。<br>如果不关闭autommit需要使用start transaction来显示开始一个事务。</p>
<p>事务只有在commit后才会在其他会话中被其他用户可见，也就是真正的写入。<br>也可以进行回滚来取消上个事务roolback。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库抽象层PDO&quot;&gt;&lt;a href=&quot;#数据库抽象层PDO&quot; class=&quot;headerlink&quot; title=&quot;数据库抽象层PDO&quot;&gt;&lt;/a&gt;数据库抽象层PDO&lt;/h2&gt;&lt;p&gt;在如今各种数据库方案之中,开发人员除了选择其中一种来开发,也需要在不同的数据库之间进行移植,这种跨数据库处理,就提出了一种需求:”数据库抽象层”.它能够解除应用程序逻辑与数据库通信逻辑之间的耦合,通过通用接口传递所有与数据库相关的命令,使得应用程序可以使用多种数据库解决方案.&lt;br&gt;PDO就是一个”数据库访问抽象层”,统一了各种数据库的访问接口,这样一来,大大提升了程序的可移植性,而且具有较高的效率.对于数据库的操作,需要针对特定数据库的PDO驱动程序,这个驱动程序就是承载通信的桥梁,而只有在运行时PDO才加载必须的数据库驱动程序,大大提高了其灵活性.在不同数据库间切换时,只需要重新加载驱动就行.&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://jacean.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mysql" scheme="http://jacean.github.io/tags/mysql/"/>
    
      <category term="PHP" scheme="http://jacean.github.io/tags/PHP/"/>
    
      <category term="PDO" scheme="http://jacean.github.io/tags/PDO/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用配置和语句</title>
    <link href="http://jacean.github.io/2016/05/07/mysql%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E8%AF%AD%E5%8F%A5/"/>
    <id>http://jacean.github.io/2016/05/07/mysql常用配置和语句/</id>
    <published>2016-05-07T13:53:30.000Z</published>
    <updated>2016-05-07T14:01:17.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装初始"><a href="#安装初始" class="headerlink" title="安装初始"></a>安装初始</h2><p>其实现在很多新接触开发的都不会自己单独去安装mysql，而是采用xampp等集成包。不过这也没关系。mysql的配置又不会变。<br>当安装完毕之后，在phpMyAdmin中，将右边栏的滚动条拉到最后，可以看到这么一句警告</p>
<blockquote>
<p>您配置文件中的设置（空密码的 root）是 MySQL 的默认管理员帐号。您的 MySQL 服务器正在使用这个默认设置运行，这样容易被入侵，我们强烈建议您立即给‘root’用户设置一个密码来修复这个安全漏洞。</p>
</blockquote>
<a id="more"></a>
<p>mysql登录语句</p>
<blockquote>
<p>mysql -h 服务器主机地址(IP/domain) -u 用户名 -p密码</p>
</blockquote>
<p>mysql很明确的告诉我们，现在mysql的root账户是没有密码的，很容易被入侵，比如像这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\wanja&gt; mysql -h localhost -u root</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 12</span><br><span class="line">Server version: 5.6.21 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br></pre></td></tr></table></figure>
<p>不需要密码就可以直接登陆了。</p>
<blockquote>
<p>如果输入mysql提示不是命令的话就是环境变量没有设置好。需要添加环境变量。<br>    xampp    -&gt;  D:\xampp<br>    path    +&gt;    ;%XAMPP%\mysql\bin</p>
</blockquote>
<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>现在的互联网，安全很重要，虽然自己的东西没啥大的价值，但终归保密一点还是好的，所以需要设置密码咯。<br>先来看看自己的用户情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;</span><br><span class="line">+---------------------------+</span><br><span class="line">| query                     |</span><br><span class="line">+---------------------------+</span><br><span class="line">| User: &apos;root&apos;@&apos;127.0.0.1&apos;; |</span><br><span class="line">| User: &apos;root&apos;@&apos;::1&apos;;       |</span><br><span class="line">| User: &apos;&apos;@&apos;localhost&apos;;     |</span><br><span class="line">| User: &apos;pma&apos;@&apos;localhost&apos;;  |</span><br><span class="line">| User: &apos;root&apos;@&apos;localhost&apos;; |</span><br><span class="line">+---------------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>咱们来更改root账户的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//设置密码</span><br><span class="line">MariaDB [mysql]&gt; set password for root@localhost = password(&apos;wanjq&apos;);</span><br><span class="line">Query OK, 0 rows affected (0.44 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; quit</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">//无密码登陆失败</span><br><span class="line">PS C:\Users\Administrator&gt; mysql -h localhost -u root</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)</span><br><span class="line"></span><br><span class="line">//使用密码登陆成功</span><br><span class="line">PS C:\Users\Administrator&gt; mysql -h localhost -u root -pwanjq</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 47</span><br><span class="line">Server version: 10.1.10-MariaDB mariadb.org binary distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2015, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></p>
<p>其实用户信息都是mysql.user表里，可以使用常规的查询更新语句来更新密码的，当然是在登陆之后。如果忘了密码，可以按下面的步骤，这是<a href="http://jingyan.baidu.com/article/495ba841ef412d38b30edeb2.html" target="_blank" rel="external">百度经验的一个方法</a></p>
<blockquote>
<ol>
<li>关闭正在运行的MySQL服务。</li>
<li>打开DOS窗口，转到mysql\bin目录。 </li>
<li>输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 </li>
<li>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 </li>
<li>连接权限数据库： use mysql; 。 </li>
<li>改密码：update user set password=password(“root”) where user=”root”;（别忘了最后加分号） 。 </li>
<li>刷新权限（必须步骤）：flush privileges;　。 </li>
<li>退出  quit。</li>
<li>重启mysql服务，使用用户名root和刚才设置的新密码root登录就ok了；</li>
</ol>
</blockquote>
<p>要注意一点，在设置root密码之后，再用phpmyadmin连接可就不成了，因为phpmyadmin的默认是无密码连接，所以咱们得更改phpmyadmin的配置文件。</p>
<blockquote>
<p>xampp/phpMyAdmin/config.inc.php</p>
</blockquote>
<p>把password的值设为新改的密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* Authentication type and info */</span><br><span class="line">$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;] = &apos;config&apos;;</span><br><span class="line">$cfg[&apos;Servers&apos;][$i][&apos;user&apos;] = &apos;root&apos;;</span><br><span class="line">$cfg[&apos;Servers&apos;][$i][&apos;password&apos;] = &apos;yourpassword&apos;;</span><br><span class="line">$cfg[&apos;Servers&apos;][$i][&apos;extension&apos;] = &apos;mysqli&apos;;</span><br><span class="line">$cfg[&apos;Servers&apos;][$i][&apos;AllowNoPassword&apos;] = true;</span><br><span class="line">$cfg[&apos;Lang&apos;] = &apos;&apos;;</span><br></pre></td></tr></table></figure></p>
<h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><p>之前给设置了密码，然后登陆的时候就需要了密码，不过现在的账户都是只能在本地的机器上登陆的，不能远程，要远程的话有很多方法。比如，设置root账户的登陆选项不限制localhost，不过，我的选择是新建一个账户用于远程访问，毕竟root太重要了。<br>重新登陆mysql，然后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//添加新用户，赋予所有表的所有权限，新用户wanjq，允许登陆%代表任意主机，设置密码</span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;wanjq&apos;@&apos;%&apos; IDENTIFIED BY &apos;wanjq&apos; WITH GRANT OPTION</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected (0.17 sec)</span><br><span class="line"></span><br><span class="line">//查询新的用户信息</span><br><span class="line">MariaDB [(none)]&gt; SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;</span><br><span class="line">+---------------------------+</span><br><span class="line">| query                     |</span><br><span class="line">+---------------------------+</span><br><span class="line">| User: &apos;wanjq&apos;@&apos;%&apos;;        |</span><br><span class="line">| User: &apos;root&apos;@&apos;127.0.0.1&apos;; |</span><br><span class="line">| User: &apos;root&apos;@&apos;::1&apos;;       |</span><br><span class="line">| User: &apos;&apos;@&apos;localhost&apos;;     |</span><br><span class="line">| User: &apos;pma&apos;@&apos;localhost&apos;;  |</span><br><span class="line">| User: &apos;root&apos;@&apos;localhost&apos;; |</span><br><span class="line">+---------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>然后我在本地的机器上链接我刚刚设置的服务器的mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//使用ip，端口，用户名，密码来链接</span><br><span class="line">PS C:\Users\wanja&gt; mysql -h 123.206.74.29 -P 3306 -u wanjq -pwanjq</span><br><span class="line">Warning: Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 49</span><br><span class="line">Server version: 5.5.5-10.1.10-MariaDB mariadb.org binary distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">//查询用户信息</span><br><span class="line">mysql&gt; SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user;</span><br><span class="line">+---------------------------+</span><br><span class="line">| query                     |</span><br><span class="line">+---------------------------+</span><br><span class="line">| User: &apos;wanjq&apos;@&apos;%&apos;;        |</span><br><span class="line">| User: &apos;root&apos;@&apos;127.0.0.1&apos;; |</span><br><span class="line">| User: &apos;root&apos;@&apos;::1&apos;;       |</span><br><span class="line">| User: &apos;&apos;@&apos;localhost&apos;;     |</span><br><span class="line">| User: &apos;pma&apos;@&apos;localhost&apos;;  |</span><br><span class="line">| User: &apos;root&apos;@&apos;localhost&apos;; |</span><br><span class="line">+---------------------------+</span><br><span class="line">6 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="mysql数据列类型"><a href="#mysql数据列类型" class="headerlink" title="mysql数据列类型"></a>mysql数据列类型</h2><ol>
<li><p>数值类的数据列类型</p>
<pre><code>1. 整型
    TINYINT,1字节，
    SMALLINT，2字节
    MEDIUINT，3字节
    INT，4字节
    BIGINT，8字节
2. 浮点型
    FLOAT，单精度，4/8字节，
    DOUBLE，双精度，8字节，
    DECIMAL，字符串形式表示的浮点数，以字符串形式保存，不会进行四舍五入的运算，但也不能直接用于计算。
</code></pre><p> INT(3)只是表示显示宽度，并不会影响存储和数值范围<br> FLOAT(6,1)会对存入的浮点数据进行四舍五入来满足要求，比如1.2345会存成1.2</p>
</li>
<li>字符串类数据列类型<pre><code>CHAR[(M)]
VARCHAR[(M)]
BLOD,TEXT,(TINYXXX,XXX,MEDIUXXX,LONGXXX,分别表示非常小，小，中等，大)
ENUM(&apos;value1&apos;,&apos;value2&apos;,...),枚举
SET(&apos;value1&apos;,&apos;value2&apos;,...),集合
</code></pre> BLOD,TEXT为可变长类型，其长度取决于实际存放在列中值得长度，再加上存放该值长度所需要的字节数，对应为1，2，3，4。BLOD区分大小写，TEXT不区分。<br> CHAR和VARCHAR的类型长度范围都是0~255，但是CHAR会对不够给定大小的值进行空格填补，而VARCHAR则是视给定大小为最大值，不会空格填补。<br> ENUM和SET都是特殊的串类型，列值只能在固定的集合中选择，但前者是单选，后者是多选。</li>
<li>日期和时间型数据列类型<pre><code>DATE，3字节，YYYY-MM-DD
TIME，3字节，hh:mm:ss
DATETIME，8字节,YYYY-MM-DD hh:mm:ss
TIMESTAMP，4字节,YYYYMMDDhhmmss
YEAR，1字节，YYYY
</code></pre> 每个时间和日期类型都有一个零值，当插入非法数据时就用零值来添加</li>
<li>NULL值<br> NULL可以被插入，也可以被检索，也可以用来做bool运算，但是不能用来做算数运算</li>
</ol>
<h2 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h2><ol>
<li><strong>UNSIGHED</strong>，只用于设置数值类型，不允许出现负数。比如TINYINT是-128~127，就会变成0~255，存储长度增加一倍。</li>
<li><strong>ZEROFILL</strong>，只用于数值类型，在数值之前自动用0补齐不足的位数。比如INT(3)，插入5实则005.当给一个字段应用ZEROFILL时，自动应用UNSIGHED属性。</li>
<li><strong>AUTO_INCREMENT</strong>,自动增量属性。不允许重复。如果插入的值是NULL，0或留空则自动在上一值得基础上加一。如果是一非零值，则如果不存在则以此插入并作为新的自增起点，存在则报错。</li>
<li><strong>NULL</strong>和<strong>NOT NULL</strong>，默认NULL，以及在操作时不允许是NULL。</li>
<li><strong>DEFAULT</strong>，默认值</li>
</ol>
<h2 id="数据表类型"><a href="#数据表类型" class="headerlink" title="数据表类型"></a>数据表类型</h2><p>MySQL常用的表类型是MyISAM和InnoDB。<br>MyISAM成熟稳定易管理。并发读写有优化，文件空间占用小，支持全文索引，只支持表锁定。但是没有事务处理，外键等。所以，它可以节约时间空间，有比较高的响应速度。<br>InnoDB是MyISM的更新换代产品，提供了事务安全引擎，外键机制等，支持行锁定。但是，占用空间大(最大2倍)，同时不支持全文索引。所以，它提供更精细更安全的操作环境。<br>可以使用以下方式在创建表时指定表类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t (i INT)ENGINE=INNODB;</span><br><span class="line">Query OK, 0 rows affected (0.20 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table tm (i INT)ENGINE=MYISAM;</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure></p>
<p>可以在默认的数据库存储目录下找到数据表的存储文件。<br>我的是:C:\xampp\mysql\data\<br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/mysql-engine.png" alt="数据表不同存储文件"><br>t是INNODB类型的，是以表空间的概念来管理数据表的，所以只有一个.frm的结构定义文件，和其他的表空间文件。<br>tm是MYISAM的，有.frm的结构定义文件，还有.myd的数据文件，以及.myi的索引文件。</p>
<p><strong>对数据表的一切操作，都是对数据库目录文件下的文件进行操作。</strong></p>
<h2 id="数据表的字符集"><a href="#数据表的字符集" class="headerlink" title="数据表的字符集"></a>数据表的字符集</h2><p>将在SQL命令中输入的字符集，和查询结果里的字符集设置为相同的字符集，可以避免很多麻烦。<br>当在创建表或库的时候，如果不显示指定字符集的话，就会用mysql配置文件的默认字符集了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database if not exists mydb default character set utf8 collate utf8_general_ci;</span><br><span class="line">Query OK, 1 row affected (0.07 sec)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>character set 字符集<br>collate 校对规则</p>
</blockquote>
<p>可以通过default-character-set选项来指定字符集为utf8.<br>或是使用set character set ‘utf8’命令，来使客户端字符集和查询字符集都为utf8.</p>
<h2 id="mysql索引"><a href="#mysql索引" class="headerlink" title="mysql索引"></a>mysql索引</h2><p>mysql中主要分为四大索引</p>
<ul>
<li>主键索引</li>
<li>唯一索引</li>
<li>常规索引</li>
<li>全文索引</li>
</ul>
<p>通过索引来提供查询优化，确保数据的唯一性，以及对搜索的优化。</p>
<h3 id="主键索引-PRIMARY-KEY"><a href="#主键索引-PRIMARY-KEY" class="headerlink" title="主键索引 PRIMARY KEY"></a>主键索引 PRIMARY KEY</h3><p>每个表只能有一个，不能重复，非空，所以在创建主键列时必须指定非空。可以用下面的方法声明主键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists users(</span><br><span class="line">    -&gt; ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; NAME VARCHAR(50) NOT NULL,</span><br><span class="line">    -&gt; TEL VARCHAR(11) NOT NULL UNIQUE,</span><br><span class="line">    -&gt; SEX ENUM(&apos;man&apos;,&apos;woman&apos;) NOT NULL DEFAULT &apos;man&apos;,</span><br><span class="line">    -&gt; PRIMARY KEY(ID)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.70 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table if not exists students(</span><br><span class="line">    -&gt; ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -&gt; NAME VARCHAR(50) NOT NULL,</span><br><span class="line">    -&gt; TEL VARCHAR(11) NOT NULL UNIQUE,</span><br><span class="line">    -&gt; SEX ENUM(&apos;man&apos;,&apos;woman&apos;) NOT NULL DEFAULT &apos;man&apos;</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (1.79 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc students;</span><br></pre></td></tr></table></figure></p>
<p>主键还可与外键索引构成完整性约束，防止出现数据不一致。</p>
<h3 id="唯一索引-UNIQUE"><a href="#唯一索引-UNIQUE" class="headerlink" title="唯一索引 UNIQUE"></a>唯一索引 UNIQUE</h3><p>防止重复，但是一个表中可以有多个唯一索引，与之具有相同功能的主键却只能有一个。<br>只需要在确定不包含重复值得列定义之后加上UNIQUE属性就可以了。<br>如上面例子的</p>
<blockquote>
<p>TEL VARCHAR(11) NOT NULL UNIQUE,</p>
</blockquote>
<h3 id="常规索引-INDEX"><a href="#常规索引-INDEX" class="headerlink" title="常规索引 INDEX"></a>常规索引 INDEX</h3><p>优化索引能够大幅提升数据库的性能。<br>但是索引占用磁盘空间，会减慢在索引数据列上的插入、删除和修改操作，因为需要按照索引列的排序格式执行。需要谨慎创建，在条件列建立索引，比如where之后，order by或group by之后。<br>KEY和INDEX一般是同义词，可以使用这两个关键字在建表的时候一同创建索引。<br>也可以用create index或alter table命令在建表之后创建。<br>咱们先来给之前的users表补个索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create index myind on users(TEL,SEX);</span><br><span class="line">Query OK, 0 rows affected (0.15 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; show index from users;</span><br><span class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+-----</span><br><span class="line">-------+---------+---------------+</span><br><span class="line">| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Inde</span><br><span class="line">x_type | Comment | Index_comment |</span><br><span class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+-----</span><br><span class="line">-------+---------+---------------+</span><br><span class="line">| users |          0 | PRIMARY  |            1 | ID          | A         |           0 |     NULL | NULL   |      | BTRE</span><br><span class="line">E      |         |               |</span><br><span class="line">| users |          0 | TEL      |            1 | TEL         | A         |           0 |     NULL | NULL   |      | BTRE</span><br><span class="line">E      |         |               |</span><br><span class="line">| users |          1 | myind    |            1 | TEL         | A         |           0 |     NULL | NULL   |      | BTRE</span><br><span class="line">E      |         |               |</span><br><span class="line">| users |          1 | myind    |            2 | SEX         | A         |           0 |     NULL | NULL   |      | BTRE</span><br><span class="line">E      |         |               |</span><br><span class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+-----</span><br><span class="line">-------+---------+---------------+</span><br><span class="line">4 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure></p>
<p>索引建立完毕之后，可以使用<strong>show index from tablename;</strong>来查看。<br>新创建的索引，索引名是myind，列是TEL和SEX，同时可以看到TEL还有唯一索引，ID是主键索引。<br>创建索引自然也可以删除索引，用<strong>drop index indexname on tablename</strong>比如这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop index myind on users;</span><br><span class="line">Query OK, 0 rows affected (0.10 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; show index from users;</span><br><span class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+-----</span><br><span class="line">-------+---------+---------------+</span><br><span class="line">| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Inde</span><br><span class="line">x_type | Comment | Index_comment |</span><br><span class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+-----</span><br><span class="line">-------+---------+---------------+</span><br><span class="line">| users |          0 | PRIMARY  |            1 | ID          | A         |           0 |     NULL | NULL   |      | BTRE</span><br><span class="line">E      |         |               |</span><br><span class="line">| users |          0 | TEL      |            1 | TEL         | A         |           0 |     NULL | NULL   |      | BTRE</span><br><span class="line">E      |         |               |</span><br><span class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+-----</span><br><span class="line">-------+---------+---------------+</span><br><span class="line">2 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure></p>
<p>然后咱们新建一张表，并创建索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table indtable(</span><br><span class="line">    -&gt; indID INT(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; userID INT(10) NOT NULL,</span><br><span class="line">    -&gt; bookID INT(10) NOT NULL,</span><br><span class="line">    -&gt; number INT(10) NOT NULL,</span><br><span class="line">    -&gt; PRIMARY KEY(indID),</span><br><span class="line">    -&gt; KEY ind(userID,bookID)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.15 sec)</span><br></pre></td></tr></table></figure></p>
<p>如果不给出索引名的话，系统会根据第一个索引列的名称自动选择一个索引名。</p>
<h3 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引 FULLTEXT"></a>全文索引 FULLTEXT</h3><p>全文索引可以使我们在不使用模式匹配的前提下去搜索单词或短语。<br>这类FULLTEXT索引，只能用于MYISAM表，并且只可以在CHAR，VARCHAR，或TEXT类型的列上创建。可以多列。<br>这个索引会把在某个表的某个数据列里出现过的所有单词生成一份清单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table indtable(</span><br><span class="line">    -&gt; indID INT(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; userID INT(10) NOT NULL,</span><br><span class="line">    -&gt; bookID INT(10) NOT NULL,</span><br><span class="line">    -&gt; number INT(10) NOT NULL,</span><br><span class="line">    -&gt; detail TEXT NOT NULL,</span><br><span class="line">    -&gt; FULLTEXT(detail),</span><br><span class="line">    -&gt; PRIMARY KEY(indID)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (1.04 sec)</span><br></pre></td></tr></table></figure></p>
<p>创建全文索引后，基于全文索引的查询有所不同，需要用到两个特殊的mysql函数。match()和against().match负责列举要搜索的一个或多个列，against负责给出匹配字符串。</p>
<blockquote>
<p>select indID from indtable where match(detail) against(‘index’);<br>select match(detail) against(‘index’);//搜索表中每一条记录，并返回匹配记录的加权分列表。</p>
</blockquote>
<h2 id="常用mysql语句"><a href="#常用mysql语句" class="headerlink" title="常用mysql语句"></a>常用mysql语句</h2><h3 id="创建删除数据库"><a href="#创建删除数据库" class="headerlink" title="创建删除数据库"></a>创建删除数据库</h3><p>合理使用if exists语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database if not exists test;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop database if exists test;</span><br><span class="line">Query OK, 0 rows affected (0.23 sec)</span><br></pre></td></tr></table></figure></p>
<h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| elab               |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| phpmyadmin         |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table if not exists users(</span><br><span class="line">    -&gt; ID INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; NAME VARCHAR(50) NOT NULL,</span><br><span class="line">    -&gt; TEL VARCHAR(11) NOT NULL UNIQUE,</span><br><span class="line">    -&gt; SEX ENUM(&apos;man&apos;,&apos;woman&apos;) NOT NULL DEFAULT &apos;man&apos;,</span><br><span class="line">    -&gt; PRIMARY KEY(ID)</span><br><span class="line">    -&gt; );</span><br><span class="line">mysql&gt; desc users;    </span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| ID    | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| NAME  | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| TEL   | varchar(11)         | NO   | UNI | NULL    |                |</span><br><span class="line">| SEX   | enum(&apos;man&apos;,&apos;woman&apos;) | NO   |     | man     |                |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">4 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ol>
<li><p>添加列</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table users add BIRTH DATE NOT NULL;</span><br><span class="line">Query OK, 0 rows affected (0.29 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc users;</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| ID    | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| NAME  | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| TEL   | varchar(11)         | NO   | UNI | NULL    |                |</span><br><span class="line">| SEX   | enum(&apos;man&apos;,&apos;woman&apos;) | NO   |     | man     |                |</span><br><span class="line">| BIRTH | date                | NO   |     | NULL    |                |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">5 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
<p> 指定列前/后添加列</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table users add user VARCHAR(4) NOT NULL FIRST;</span><br><span class="line">Query OK, 0 rows affected (0.21 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table users add tag VARCHAR(50) NOT NULL AFTER SEX;</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc users;</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| user  | varchar(4)          | NO   |     | NULL    |                |</span><br><span class="line">| ID    | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| NAME  | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| TEL   | varchar(11)         | NO   | UNI | NULL    |                |</span><br><span class="line">| SEX   | enum(&apos;man&apos;,&apos;woman&apos;) | NO   |     | man     |                |</span><br><span class="line">| tag   | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| BIRTH | date                | NO   |     | NULL    |                |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">7 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列<br> 只修改列类型可以用modify</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table users modify TEL INT UNSIGNED;</span><br><span class="line">Query OK, 0 rows affected (0.40 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc users;</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| user  | varchar(4)          | NO   |     | NULL    |                |</span><br><span class="line">| ID    | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| NAME  | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| TEL   | int(10) unsigned    | YES  | UNI | NULL    |                |</span><br><span class="line">| SEX   | enum(&apos;man&apos;,&apos;woman&apos;) | NO   |     | man     |                |</span><br><span class="line">| tag   | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| BIRTH | date                | NO   |     | NULL    |                |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">7 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
<p> 同时修改列名的话用change</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table users change TEL PHONE INT UNSIGNED;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc users;</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| user  | varchar(4)          | NO   |     | NULL    |                |</span><br><span class="line">| ID    | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| NAME  | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| PHONE | int(10) unsigned    | YES  | UNI | NULL    |                |</span><br><span class="line">| SEX   | enum(&apos;man&apos;,&apos;woman&apos;) | NO   |     | man     |                |</span><br><span class="line">| tag   | varchar(50)         | NO   |     | NULL    |                |</span><br><span class="line">| BIRTH | date                | NO   |     | NULL    |                |</span><br><span class="line">+-------+---------------------+------+-----+---------+----------------+</span><br><span class="line">7 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
<p> <strong>使用change的时候，如果不更改列名，那就把第二个名字写成原名字，执行效果同modify。</strong></p>
</li>
<li>重命名表 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table users RENAME AS students;</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| students       |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop table if exists students;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.05 sec)</span><br></pre></td></tr></table></figure>
</code></pre><h3 id="查询数据库中的表"><a href="#查询数据库中的表" class="headerlink" title="查询数据库中的表"></a>查询数据库中的表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use elab</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_elab |</span><br><span class="line">+----------------+</span><br><span class="line">| locations      |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure>
<h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><ol>
<li><p>显示列。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; show columns from locations;</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">| ID          | int(9)       | NO   | PRI | NULL    |       |</span><br><span class="line">| name        | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| latitude    | float        | NO   |     | NULL    |       |</span><br><span class="line">| longitude   | float        | NO   |     | NULL    |       |</span><br><span class="line">| description | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| image       | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| other       | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序方式调出表结构</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; desc locations</span><br><span class="line">    -&gt; ;</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">| ID          | int(9)       | NO   | PRI | NULL    |       |</span><br><span class="line">| name        | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| latitude    | float        | NO   |     | NULL    |       |</span><br><span class="line">| longitude   | float        | NO   |     | NULL    |       |</span><br><span class="line">| description | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| image       | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| other       | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>表描述来显示表结构</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; describe locations;</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">| ID          | int(9)       | NO   | PRI | NULL    |       |</span><br><span class="line">| name        | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| latitude    | float        | NO   |     | NULL    |       |</span><br><span class="line">| longitude   | float        | NO   |     | NULL    |       |</span><br><span class="line">| description | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| image       | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| other       | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">+-------------+--------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取最详细的结构信息</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    mysql&gt; use information_schema</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from columns where table_name=&apos;locations&apos;;</span><br><span class="line">//显示完整的表构造信息图</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取表的创建语句</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create table locations;</span><br><span class="line"></span><br><span class="line">| Table     | Create Table</span><br><span class="line"></span><br><span class="line">| locations | CREATE TABLE `locations` (</span><br><span class="line">  `ID` int(9) NOT NULL,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `latitude` float NOT NULL,</span><br><span class="line">  `longitude` float NOT NULL,</span><br><span class="line">  `description` varchar(255) NOT NULL,</span><br><span class="line">  `image` varchar(255) NOT NULL,</span><br><span class="line">  `other` varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`ID`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1 |</span><br><span class="line"></span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装初始&quot;&gt;&lt;a href=&quot;#安装初始&quot; class=&quot;headerlink&quot; title=&quot;安装初始&quot;&gt;&lt;/a&gt;安装初始&lt;/h2&gt;&lt;p&gt;其实现在很多新接触开发的都不会自己单独去安装mysql，而是采用xampp等集成包。不过这也没关系。mysql的配置又不会变。&lt;br&gt;当安装完毕之后，在phpMyAdmin中，将右边栏的滚动条拉到最后，可以看到这么一句警告&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;您配置文件中的设置（空密码的 root）是 MySQL 的默认管理员帐号。您的 MySQL 服务器正在使用这个默认设置运行，这样容易被入侵，我们强烈建议您立即给‘root’用户设置一个密码来修复这个安全漏洞。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="http://jacean.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mysql" scheme="http://jacean.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>微信开发--iframe中使用微信api</title>
    <link href="http://jacean.github.io/2016/04/20/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-iframe%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1api/"/>
    <id>http://jacean.github.io/2016/04/20/微信开发-iframe中使用微信api/</id>
    <published>2016-04-19T16:04:08.000Z</published>
    <updated>2016-04-19T16:24:43.142Z</updated>
    
    <content type="html"><![CDATA[<p>虽然题目是iframe中使用微信api,但是我得声明一点<br><strong>微信api是不能在iframe中进行签名认证的</strong></p>
<p>这算自相矛盾,但是,开发就是要在矛盾中找到解决方案.所以,您接着往下看吧.<br><a id="more"></a><br>微信限制了api的调用,不能在iframe中进行api的签名认证,只能在主页面中使用.</p>
<p>所以解决方法就是在父页面实现微信api的签名认证,然后iframe里利用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.parent.wx.xxx;</span><br><span class="line">window.top.wx.xxx;</span><br></pre></td></tr></table></figure>
<p>这样的方法来实现iframe使用微信api.</p>
<p>然后看一个实际的应用场景.</p>
<p>微信提供了认证的几种方式,比如php,java,node,python.<br>但是,假设我的主项目是jsp的,我要用微信api,然而我只有或是只会只能用php的验证方法,而我又想在iframe中使用微信api,我不能让一个jsp页面同时有php的存在,那该怎么办?</p>
<p>我的方法就是,把认证签名的父页面,摆脱后台限制.</p>
<p>我现在有php的验证是吧,那我就用ajax和php后台把签名数据要过来,然后js去验证就好了.<br>这样主页面就只剩下纯html和js.这时候,主项目爱是java是java,python是python,都随意了,微信api随便用.</p>
<p>根据我之前的(ajax实现php验证微信的博客)[<a href="http://blog.jacean.cn/2016/04/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-php%E4%BD%BF%E7%94%A8ajax%E8%AE%A4%E8%AF%81%E7%AD%BE%E5%90%8D/],我可以在主页面是引入脚本" target="_blank" rel="external">http://blog.jacean.cn/2016/04/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-php%E4%BD%BF%E7%94%A8ajax%E8%AE%A4%E8%AF%81%E7%AD%BE%E5%90%8D/],我可以在主页面是引入脚本</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;include_wxsignature.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>这样,这个页面就已经实现了微信api的认证,并没有需要后台代码.</p>
<p>然后在iframe里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//开始录音</span><br><span class="line">function startRecord() &#123;</span><br><span class="line">    c = 0;</span><br><span class="line">    timedCount();</span><br><span class="line">    window.top.wx.startRecord();</span><br><span class="line">    onVoiceRecordEnd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//停止录音接口</span><br><span class="line">function stopRecord() &#123;</span><br><span class="line">    window.top.wx.stopRecord(&#123;</span><br><span class="line">        success: function(res) &#123;</span><br><span class="line">            localId = res.localId;</span><br><span class="line">            stopCount();</span><br><span class="line">            document.getElementById(&apos;localid&apos;).innerHTML = localId;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样下来,对父页面的限制就没有了,因为需要的签名认证,纯js已经实现了.<br>既没有干涉主项目,又实现了功能需求.</p>
<p>在这个场景下最好的当然是利用jsp验证,一步到位.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然题目是iframe中使用微信api,但是我得声明一点&lt;br&gt;&lt;strong&gt;微信api是不能在iframe中进行签名认证的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这算自相矛盾,但是,开发就是要在矛盾中找到解决方案.所以,您接着往下看吧.&lt;br&gt;
    
    </summary>
    
      <category term="微信开发" scheme="http://jacean.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信开发" scheme="http://jacean.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="iframe" scheme="http://jacean.github.io/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>微信开发--页面互相调用传值</title>
    <link href="http://jacean.github.io/2016/04/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-%E9%A1%B5%E9%9D%A2%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8%E4%BC%A0%E5%80%BC/"/>
    <id>http://jacean.github.io/2016/04/19/微信开发-页面互相调用传值/</id>
    <published>2016-04-19T15:26:51.000Z</published>
    <updated>2016-04-19T16:46:54.205Z</updated>
    
    <content type="html"><![CDATA[<p>微信开发,也就是开发一套在微信浏览器上跑的网页,所以还算是web,但是是限制后的web.会有很多限制,就像阉割了一样,用的时候会很难受.<br>比如说,window.open(),window.close(),window.opener(),这些页面窗口开关和互相调用传值的就直接被砍掉或是没法用了.<br>而我的工作,是需要在当前页面调用微信api实现操作,然后返回值,但是当前页面的数据不能丢,当前页面得继续保持活动,这样的话,微信就呵呵了.<br>且听我微信页面传值的一番苦斗吧.<br><a id="more"></a></p>
<h2 id="微信浏览器限制"><a href="#微信浏览器限制" class="headerlink" title="微信浏览器限制"></a>微信浏览器限制</h2><p>首先来说明一下自己开发中感觉到的微信浏览器的一下限制.</p>
<ol>
<li>window.opener()不可用.微信浏览器是单页面的.也就是说,你用window.open()打开一个页面后,opener()就已经被关闭了,是没有办法通过window.opener()与之前的页面或窗口进行交互.</li>
<li>window.close()不可用,直接使用控制台会输出提示,<blockquote>
<p>Scripts may close only the windows that were opened by it” (脚本只能关闭它所打开的窗口)</p>
</blockquote>
</li>
</ol>
<p>也不能使用形如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a=window.open(&quot;www.jacean.cn&quot;);</span><br><span class="line">a.close();</span><br></pre></td></tr></table></figure>
<p>会提示不能这样用.因为微信是单页面的,之前的opener已经被关闭了,那么也就没谁能关闭这个页面了.<br>不过,微信实现了关闭当前网页窗口接口</p>
<blockquote>
<p>wx.closeWindow();</p>
</blockquote>
<p>使用这个接口,微信会关闭网页窗口,但因为是单页面,所以就会直接回到对话界面.也不能让我们开心使用.</p>
<ol>
<li>微信api不能在iframe中使用.凡是调用微信api的,那么签名认证必须得是在主页面,内嵌iframe是不可以进行签名认证的.<br>但是,在主页面认证后,可以通过window.parent.function()或window.top.function()来执行父页面的函数,微信api自然也可以.</li>
</ol>
<p>所以,在微信浏览器中,能够传值的网页也就是同时存活的网页,就只有iframe和其父页面了.</p>
<h2 id="微信页面传值"><a href="#微信页面传值" class="headerlink" title="微信页面传值"></a>微信页面传值</h2><p>上面的坑是我踩过的,看到的人可记得不要再踩了.<br>然后看我的传值方法吧.</p>
<h3 id="iframe父子互相调用"><a href="#iframe父子互相调用" class="headerlink" title="iframe父子互相调用"></a>iframe父子互相调用</h3><p>且看演示如下:</p>
<h4 id="子调父"><a href="#子调父" class="headerlink" title="子调父"></a>子调父</h4><p>我这里用的是window.top,如果是一层嵌套那么window.parent足够了,多的话可以用top.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//父</span><br><span class="line">function closemedia(status,result)&#123;</span><br><span class="line">            if(status==&quot;ok&quot;)&#123;</span><br><span class="line">                if(result instanceof Array)</span><br><span class="line">                &#123;//上传图片</span><br><span class="line">                    alert(result[0]);</span><br><span class="line">                &#125;else</span><br><span class="line">                &#123;//录音和文件上传属于此类</span><br><span class="line">                    alert(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else if(status==&quot;error&quot;)&#123;</span><br><span class="line">                alert(&quot;error&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                alert(&quot;cancel&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//子</span><br><span class="line">function cancelVoice() &#123;</span><br><span class="line">            status = &quot;cancel&quot;;</span><br><span class="line">            result = &quot;&quot;;</span><br><span class="line">            window.top.closemedia();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>可以利用这种办法实现结果回传.</p>
<h4 id="父调子"><a href="#父调子" class="headerlink" title="父调子"></a>父调子</h4><p>父页面通过contentWindow来调用子页面的内容.</p>
<pre><code>//父
$(&apos;#iframeid&apos;)[0].contentWindow.stopRecord();

............

//开始录音
function startRecord() {
    c = 0;
    timedCount();
    window.top.wx.startRecord();
    onVoiceRecordEnd();
}
</code></pre><p>可以看到,子调父,父调子还是很灵活的.</p>
<h3 id="值的中转站"><a href="#值的中转站" class="headerlink" title="值的中转站"></a>值的中转站</h3><p>逻辑上被调用的页面把结果写下来,然后关闭,逻辑上的主页面再扫描结果,把值读取到.中间通过唯一的UID来进行标识认领.<br>其实也相当于是进行post或get再呼叫一次,看需求是什么来用.<br>这个的不足是可能会造成主页面的当前数据丢失.<br>这个就不放代码了,大家都是用过的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信开发,也就是开发一套在微信浏览器上跑的网页,所以还算是web,但是是限制后的web.会有很多限制,就像阉割了一样,用的时候会很难受.&lt;br&gt;比如说,window.open(),window.close(),window.opener(),这些页面窗口开关和互相调用传值的就直接被砍掉或是没法用了.&lt;br&gt;而我的工作,是需要在当前页面调用微信api实现操作,然后返回值,但是当前页面的数据不能丢,当前页面得继续保持活动,这样的话,微信就呵呵了.&lt;br&gt;且听我微信页面传值的一番苦斗吧.&lt;br&gt;
    
    </summary>
    
      <category term="微信开发" scheme="http://jacean.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信开发" scheme="http://jacean.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微信开发--php使用ajax认证签名</title>
    <link href="http://jacean.github.io/2016/04/19/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91-php%E4%BD%BF%E7%94%A8ajax%E8%AE%A4%E8%AF%81%E7%AD%BE%E5%90%8D/"/>
    <id>http://jacean.github.io/2016/04/19/微信开发-php使用ajax认证签名/</id>
    <published>2016-04-19T13:49:28.000Z</published>
    <updated>2016-04-19T15:22:33.253Z</updated>
    
    <content type="html"><![CDATA[<p>微信现在很火,基于微信接口开发各种自家功能产品的公司很多.<br>老板也要开发微信,所以我也得干微信.<br>微信开发,首先得认证签名让微信提供接口给你.微信公众开发平台的官网有提供sample,有php,java,node和python.我用的php.<br>先提坑,用微信提供的例子来进行验证,本页面是好用的,但是那个jssdk不能通过ajax直接调用,我没注意结果坑惨我了.<br>一直报</p>
<blockquote>
<p>config:invalid signature</p>
</blockquote>
<p>且看我如何干掉它.<br><a id="more"></a></p>
<h2 id="普通认证"><a href="#普通认证" class="headerlink" title="普通认证"></a>普通认证</h2><p>微信认证需要通过config注入权限验证,配置官网说是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class="line">    appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class="line">    timestamp: , // 必填，生成签名的时间戳</span><br><span class="line">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class="line">    signature: &apos;&apos;,// 必填，签名，见附录1</span><br><span class="line">    jsApiList: [] // 必填，需要使用的JS接口列表，&#125;);</span><br></pre></td></tr></table></figure>
<p>然后它提供的php例子中的jssdk也实现了验证函数,直接参考例子调用就可以了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$signPackage = $jssdk-&gt;GetSignPackage();</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">wx.config(&#123;</span><br><span class="line">            debug: false,</span><br><span class="line">            appId: &apos;&lt;?php echo $signPackage[&quot;appId&quot;]; ?&gt;&apos;,</span><br><span class="line">            timestamp: &lt;?php echo $signPackage[&quot;timestamp&quot;]; ?&gt;,</span><br><span class="line">                nonceStr: &apos;&lt;?php echo $signPackage[&quot;nonceStr&quot;]; ?&gt;&apos;,</span><br><span class="line">            signature: &apos;&lt;?php echo $signPackage[&quot;signature&quot;]; ?&gt;&apos;,</span><br><span class="line">            jsApiList: [</span><br><span class="line">                // 所有要调用的 API 都要加到这个列表中</span><br><span class="line">                &apos;chooseImage&apos;,</span><br><span class="line">                &apos;previewImage&apos;,</span><br><span class="line">                &apos;uploadImage&apos;,</span><br><span class="line">                &apos;downloadImage&apos;</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>然后配套参数对应即可.<br>你会发现用的很爽.<br>但是,当你决定使用ajax来验证的时候,问题就出现了.</p>
<h2 id="ajax调用签名验证–url的踩坑"><a href="#ajax调用签名验证–url的踩坑" class="headerlink" title="ajax调用签名验证–url的踩坑"></a>ajax调用签名验证–url的踩坑</h2><p>刚开始嘛,想是这么爽,那就直接来,只是需要php返回的值而已,那就用ajax直接向后台要,然后前台解析json赋值.恩,就是这样,于是<br>ajax调用的php页面,wxsignature.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); //屏蔽警告输出</span><br><span class="line">require_once &quot;jssdk.php&quot;;</span><br><span class="line">include_once &quot;config/config.php&quot;;</span><br><span class="line">$jssdk = new JSSDK(APPID, SECRET);</span><br><span class="line">$signPackage = $jssdk-&gt;GetSignPackage();</span><br><span class="line"> </span><br><span class="line">$response=array();</span><br><span class="line">$response[&quot;appId&quot;]=$signPackage[&quot;appId&quot;];</span><br><span class="line">$response[&quot;timestamp&quot;]=$signPackage[&quot;timestamp&quot;];</span><br><span class="line">$response[&quot;nonceStr&quot;]=$signPackage[&quot;nonceStr&quot;];</span><br><span class="line">$response[&quot;signature&quot;]=$signPackage[&quot;signature&quot;];</span><br><span class="line">echo json_encode($response);</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>前台获取php的签名json数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url:&quot;wxsignature.php&quot;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                data=data;</span><br><span class="line">                wx.config(&#123;</span><br><span class="line">            debug: false,</span><br><span class="line">            appId: data.appId+&quot;&quot;,</span><br><span class="line">            timestamp: data.timestamp,</span><br><span class="line">                nonceStr: data.nonceStr+&quot;&quot;,</span><br><span class="line">            signature: data.signature+&quot;&quot;,</span><br><span class="line">            jsApiList: [</span><br><span class="line">                // 所有要调用的 API 都要加到这个列表中</span><br><span class="line">                &apos;openLocation&apos;,</span><br><span class="line">                &apos;getLocation&apos;,</span><br><span class="line">                &apos;chooseImage&apos;,</span><br><span class="line">                &apos;previewImage&apos;,</span><br><span class="line">                &apos;uploadImage&apos;,</span><br><span class="line">                &apos;downloadImage&apos;</span><br><span class="line">           ]</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>然后,测试,boom,爆炸了.认证失败,用微信提供的调试工具或是打开debug:true,会发现</p>
<blockquote>
<p>config:invalid signature</p>
</blockquote>
<p>然后,慌里慌张的去看appid对没对,安全域名写好没,数字和字符串转换有问题没,都没有.那到底是什么啊…<br>我就真没辙了,毕竟别人是有成功的,只能是我姿势不对,还不知道哪里不对,感人.<br>所以,之后的一系列工作都只能另寻他路,各种踩坑.<br>踩着踩着,实在受不了了,我要再战一次!!!<br>好吧,我还是输了.<br>所以我就认真思考了,谷歌不行,试试百度吧.<br>于是,我就发现有好多人也是这问题,但是提供解决的方法的没几个,真是gg,可能是问题的原因太多了吧.不过,这不重要,对我来说重要的是发现了这个<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="external">微信js接口签名校验工具</a><br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/wx-api.jpg" alt=""></p>
<p>我发现了之前忽视的一点,那就是url.<br>在这里插播一下我之后正确的签名验证,给来个大样子先,控制台输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object &#123;appId: &quot;wxf1c8b315ae8ee763&quot;, timestamp: 1461074261, nonceStr: &quot;VdThPEGqgU4RsAtX&quot;, signature: &quot;097f1f4dbbd5c9e3f51bc64ca013701ed2e1d7b5&quot;, url: &quot;http://wx.jacean.cn/asj/wxapi/part_gps.html&quot;…&#125;</span><br><span class="line"></span><br><span class="line">appId:&quot;wxf1c8b315ae8ee763&quot;</span><br><span class="line">jsapiTicket:&quot;kgt8ON7yVITDhtdwci0qeS90XOQl1ZXOLYVWCn6BaGPDfqy39W34CAL6JW3wFg2gq1H9ZZqzKwh91NJA2Lwh3Q&quot;</span><br><span class="line">nonceStr:&quot;VdThPEGqgU4RsAtX&quot;</span><br><span class="line">signature:&quot;097f1f4dbbd5c9e3f51bc64ca013701ed2e1d7b5&quot;</span><br><span class="line">timestamp:1461074261</span><br><span class="line">url:&quot;http://wx.jacean.cn/asj/wxapi/part_gps.html&quot;</span><br></pre></td></tr></table></figure>
<p>于是,赶紧去查了查相关资料,发现了url是其中重要的一环,是用来生成签名的一部分元素.<br>但是,必须要注意的是,在生成签名的时候,url必须是你认证微信接口的那个页面的url.<br>关于url必须注意以下几点:</p>
<ol>
<li>url必须动态获取</li>
<li>url不能有#号的出现,比如一些网站自动后边加#wechat,必须把这些去掉</li>
<li>url的与当前调用页在地址栏显示的必须一致(除了#),参数也是</li>
<li>url解析不能有转义,比如把:,/等转义成utf-8字符码</li>
</ol>
<p>只有这样,你的url才是正确的.</p>
<p>然后,我去看了看自己的代码,根本就没注意这点,url是在jssdk里人家提供的例子,但是人家提供的是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 注意 URL 一定要动态获取，不能 hardcode.</span><br><span class="line">    $protocol = (!empty($_SERVER[&apos;HTTPS&apos;]) &amp;&amp; $_SERVER[&apos;HTTPS&apos;] !== &apos;off&apos; || $_SERVER[&apos;SERVER_PORT&apos;] == 443) ? &quot;https://&quot; : &quot;http://&quot;;</span><br><span class="line">    $url = &quot;$protocol$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]&quot;;</span><br></pre></td></tr></table></figure>
<p>虽然是动态获取,但获取的确是调用这个jssdk的页面的url.<br>像我之前那样直接的用法,url就是我的wxsignature.php,而这个并不是我真正要用wxapi的页面,所以才会一直报错.<br>哈哈,终于找到问题了,那就解决.<br>咱们可以这样获取url,在需要微信api的页面,使用如下语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var url=encodeURI(location.href.split(&apos;#&apos;)[0]);</span><br><span class="line"></span><br><span class="line">//encodeURI方法不会对下列字符编码  ASCII字母、数字、~!@#$&amp;*()=:/,;?+&apos;</span><br><span class="line">//encodeURIComponent方法不会对下列字符编码 ASCII字母、数字、~!*()&apos;</span><br><span class="line">//encodeURIComponent比encodeURI编码的范围更大。</span><br><span class="line">//一定不能用encodeURIComponent,因为它的作用范围比较大,效果如下</span><br><span class="line">//  http://     --&gt;&gt;  http%3A%2F%2F</span><br><span class="line">//这明显会导致传入的url不能被微信认可</span><br></pre></td></tr></table></figure>
<p>url既然已经到手,那接下来就是改造微信提供的jssdk.<br>主要修改部分如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class JSSDK &#123;</span><br><span class="line">  private $appId;</span><br><span class="line">  private $appSecret;</span><br><span class="line">  private $url;                             //增加url变量</span><br><span class="line">  public function __construct($appId, $appSecret,$url) &#123;        //构造函数加入url</span><br><span class="line">    $this-&gt;appId = $appId;</span><br><span class="line">    $this-&gt;appSecret = $appSecret;</span><br><span class="line">    $this-&gt;url=$url;                        //url赋值</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"> // 注意 URL 一定要动态获取，不能 hardcode.</span><br><span class="line">    $protocol = (!empty($_SERVER[&apos;HTTPS&apos;]) &amp;&amp; $_SERVER[&apos;HTTPS&apos;] !== &apos;off&apos; || $_SERVER[&apos;SERVER_PORT&apos;] == 443) ? &quot;https://&quot; : &quot;http://&quot;;</span><br><span class="line">    //注释掉原本的url,给局部url赋值</span><br><span class="line">    //$url = &quot;$protocol$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]&quot;;       </span><br><span class="line">    $url=$this-&gt;url;                </span><br><span class="line">    $timestamp = time();</span><br><span class="line">    $nonceStr = $this-&gt;createNonceStr();</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    //增加返回结果,方便调试查看</span><br><span class="line"> $signPackage = array(</span><br><span class="line">      &quot;appId&quot;     =&gt; $this-&gt;appId,</span><br><span class="line">      &quot;nonceStr&quot;  =&gt; $nonceStr,</span><br><span class="line">      &quot;timestamp&quot; =&gt; $timestamp,</span><br><span class="line">      &quot;url&quot;       =&gt; $url,</span><br><span class="line">      &quot;signature&quot; =&gt; $signature,</span><br><span class="line">      &quot;rawString&quot; =&gt; $string,</span><br><span class="line">      &quot;jsapiTicket&quot;=&gt;$jsapiTicket</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<p>然后,url再结合ajax,前台就可以是这样了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var url=encodeURI(location.href.split(&apos;#&apos;)[0]);</span><br><span class="line">$.post(&quot;ajax_wxconfirm.php&quot;,</span><br><span class="line">&#123;</span><br><span class="line">    url:url</span><br><span class="line">&#125;,</span><br><span class="line">function(dataStr)&#123;</span><br><span class="line">    var data = $.parseJSON(dataStr);  </span><br><span class="line">        wx.config(&#123;  </span><br><span class="line">            debug: false,  </span><br><span class="line">            appId: data.appId,  </span><br><span class="line">            timestamp: data.timestamp,  </span><br><span class="line">            nonceStr: data.nonceStr,  </span><br><span class="line">            signature: data.signature,          </span><br><span class="line">            jsApiList: [  </span><br><span class="line">                &apos;openLocation&apos;,</span><br><span class="line">                &apos;getLocation&apos;,</span><br><span class="line">                &apos;chooseImage&apos;,</span><br><span class="line">                &apos;previewImage&apos;,</span><br><span class="line">                &apos;uploadImage&apos;,</span><br><span class="line">                &apos;downloadImage&apos;,</span><br><span class="line">                &apos;closeWindow&apos; </span><br><span class="line">            ]  </span><br><span class="line">        &#125;);</span><br><span class="line">        wx.ready(function() &#123;</span><br><span class="line">            // 在这里调用 API</span><br><span class="line">           </span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        wx.error(function(res) &#123;</span><br><span class="line">            alert(res.errMsg);</span><br><span class="line">        &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在再去测试,果然是</p>
<blockquote>
<p>config:ok</p>
</blockquote>
<p>而且,这部分代码可以作为一分js文件,在需要微信api的页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;include_wxsignature.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>然后就可以随意wx.xxx(),是不是很方便了.</p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>微信签名认证搞定,通过这样的话,我的微信页面就可以是纯js,html,任何语言都可以在这个页面进行操作,比如jsp和php,方便的使用wxapi.<br>之后会把整个微信开发的代码放到github,这之前有需要的可以留言或是其他方式找我先要.<br>希望能帮到和我一样踩坑微信的同道吧.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信现在很火,基于微信接口开发各种自家功能产品的公司很多.&lt;br&gt;老板也要开发微信,所以我也得干微信.&lt;br&gt;微信开发,首先得认证签名让微信提供接口给你.微信公众开发平台的官网有提供sample,有php,java,node和python.我用的php.&lt;br&gt;先提坑,用微信提供的例子来进行验证,本页面是好用的,但是那个jssdk不能通过ajax直接调用,我没注意结果坑惨我了.&lt;br&gt;一直报&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;config:invalid signature&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;且看我如何干掉它.&lt;br&gt;
    
    </summary>
    
      <category term="微信开发" scheme="http://jacean.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="php" scheme="http://jacean.github.io/tags/php/"/>
    
      <category term="ajax" scheme="http://jacean.github.io/tags/ajax/"/>
    
      <category term="微信开发" scheme="http://jacean.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>泛解析结合虚拟主机实现多域名访问不同端口或路径</title>
    <link href="http://jacean.github.io/2016/04/17/%E6%B3%9B%E8%A7%A3%E6%9E%90%E7%BB%93%E5%90%88%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E6%88%96%E8%B7%AF%E5%BE%84/"/>
    <id>http://jacean.github.io/2016/04/17/泛解析结合虚拟主机实现多域名访问不同端口或路径/</id>
    <published>2016-04-17T14:30:32.000Z</published>
    <updated>2016-04-17T16:13:13.860Z</updated>
    
    <content type="html"><![CDATA[<p>自从买了腾讯云,就有种把自己的一切都转移过来的冲动,也开始这样做了.<br>然后买了域名</p>
<blockquote>
<p>jacean.cn</p>
</blockquote>
<p>在腾讯域名云解析等了好久不见成功,就转到dnspod去解析,结果还是等了好久不成功,最后在腾讯域名注册页面发现还有个资格认证,就赶紧填资料,然后上传,等验证成功后马上就解析成功了.噢耶.<br>于是就赶紧配置主机咯.主机是用的xampp,apache80端口,然后访问域名就直接到80,继续访问.<br>但是这样,只访问一个网站,实在是太浪费了,所以我要一个域名访问一个IP的不同路径和不同端口,于是就有了这篇文章.<br><a id="more"></a><br>先看看我最开始的解析设置吧.<br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/dns-proxy-1.jpg" alt=""><br>可以看到,我设置了www解析和直接解析.暂时域名背景如此,继续.</p>
<h2 id="代理80访问转至tomcat的8080"><a href="#代理80访问转至tomcat的8080" class="headerlink" title="代理80访问转至tomcat的8080"></a>代理80访问转至tomcat的8080</h2><p>这是我最开始做的,因为jsp的解析需要tomcat,而apache80后,tomcat是8080,我又不能让我的域名每次访问时再加端口,多麻烦.于是就想到了代理.看下面的<br>文件是c:\xampp\apache\conf\extra\httpd-vhosts.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName jacean.cn</span><br><span class="line">    ProxyPass /jsp/ http://www.jacean.cn:8080/</span><br><span class="line">    ProxyPassReverse /jsp/ http://www.jacean.cn:8080/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>这样设置后,重启apache,访问<em>jacean.cn/jsp/</em>,就可以转动我的8080端口,也就是tomcat监听的端口,去进行jsp解析.没有问题.<br>也还好啦.不过,这样做的结果是只能解析这一个.当我在加入其他的,比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName jacean.cn</span><br><span class="line">    ProxyPass /git/ http://www.jacean.cn/gitstack/</span><br><span class="line">    ProxyPassReverse /git/ http://www.jacean.cn/gitstack/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>时就不好使了,只能解析第一个.<br>这样肯定就不开心了不是,我想要大家一起玩,不能你玩了我就不能玩了啊.<br>尤其是当我要把我的博客也搬到这里来时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;C:/xampp/htdocs/jacean.github.io&quot;</span><br><span class="line">    ServerName jacean.cn</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>于是我就另寻它路.找到了泛解析.</p>
<h2 id="泛解析实现一个域名多个子域名"><a href="#泛解析实现一个域名多个子域名" class="headerlink" title="泛解析实现一个域名多个子域名"></a>泛解析实现一个域名多个子域名</h2><p>且看新的域名解析配置<br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/dns-proxy-2.jpg" alt=""><br>可以看到,比之前多了一个星号(*)的解析字段.<br>什么是泛域名,咱再说一说.</p>
<blockquote>
<p>www：解析后的域名为 www.jacean.cn<br>@：直接解析主域名 jacean.cn<br><em>：泛解析，匹配其他所有域名 </em>.jacean.cn</p>
</blockquote>
<p>注册域名,是注册一个#.#,比如我的就是jacean.cn,还有jacean.com,或者jacean.com.cn,这都算是域名,就是没有前缀.<br>当解析字段是www时,就是解析www.jacean.cn,访问其他的比如a.jacean.cn是不行的,会访问不到.而@解析就是直接解析主域名,也就是直接输入jacean.cn是可以访问的.<br>当设置了<em>*后,那就是泛解析了.泛解析是一种避免输入错误的措施,是将</em>.#.com全部解析到主机.比如a.jacean.cn,b.jacean.cn都是解析到jacean.cn我的主机.但是,确确实实这是不一样的域名了.<br>而我们就可以利用这种区别,去实现多域名绑定,让apache实现不同的网站服务.</p>
<h2 id="apache配置虚拟主机多域名"><a href="#apache配置虚拟主机多域名" class="headerlink" title="apache配置虚拟主机多域名"></a>apache配置虚拟主机多域名</h2><p>现在直接上配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;C:/xampp/htdocs/jacean.github.io&quot;</span><br><span class="line">    ServerName blog.jacean.cn</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;C:/xampp/htdocs/jaceanwx&quot;</span><br><span class="line">    ServerName wx.jacean.cn</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName jsp.jacean.cn</span><br><span class="line">    ProxyPass / http://www.jacean.cn:8080/</span><br><span class="line">    ProxyPassReverse / http://www.jacean.cn:8080/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName git.jacean.cn</span><br><span class="line">    ProxyPass / http://www.jacean.cn:8088/gitstack/</span><br><span class="line">    ProxyPassReverse / http://www.jacean.cn:8088/gitstack/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>是不是看起来很爽.一下子感觉自己有了好多域名,可以随意挥霍了.<br>前两个都是同一端口下,只是做了根目录的改变.这样做的好处是,如果你的网站是使用的相对路径的话,保证你的相对路径好使.<br>比如我的blog里有很多是直接/xxx根路径下的,当我用了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName jacean.cn</span><br><span class="line">    ProxyPass /blog/ http://www.jacean.cn/jacean.github.io</span><br><span class="line">    ProxyPassReverse /blog/ http://www.jacean.cn/jacean.github.io</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>后,访问是可以访问到主页的,但是相对于根目录的一些图片啊引用啥的,就访问不到了,整个页面全乱了.<br>本来是在jacean.github.io/下面的东西,会直接在documentroot下找.<br>反向代理是把比如jacean/blog/index.php转向到jacean/jacean.github.io/index.php,这样是对的,但是在页面内容加载的时候,里面的内容并没有经过这个代理,因为根路径依然是/,而不是/blog/.<br>所以最后采用的是如上配置文件里的前两个所用的方案.</p>
<p>后面两个需要转移端口的,直接做了反向代理,这个因为是根路径的转移,所以也不会产生上面所述的问题.</p>
<p>有一点不好的是,gtistack的网站模式不寻常啊,,,这样git.jacean.cn访问之后,地址栏的连接会变成有端口的那种,很难看,不像jsp.jacean.cn不会.我没有解决方案,有看到我博客的可以给我评论帮我解决下哦.</p>
<p>注意一点就是,<strong>如果没有找到匹配的就会默认使用第一个</strong>,我默认的就是我的博客.<br>所以我现在有了</p>
<blockquote>
<p>blog.jacean.cn    博客<br>wx.jacean.cn        微信开发<br>git.jacean.cn       git服务器<br>jsp.jacean.cn       jsp网站解析</p>
</blockquote>
<p>恭喜恭喜,不客气不客气</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从买了腾讯云,就有种把自己的一切都转移过来的冲动,也开始这样做了.&lt;br&gt;然后买了域名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jacean.cn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在腾讯域名云解析等了好久不见成功,就转到dnspod去解析,结果还是等了好久不成功,最后在腾讯域名注册页面发现还有个资格认证,就赶紧填资料,然后上传,等验证成功后马上就解析成功了.噢耶.&lt;br&gt;于是就赶紧配置主机咯.主机是用的xampp,apache80端口,然后访问域名就直接到80,继续访问.&lt;br&gt;但是这样,只访问一个网站,实在是太浪费了,所以我要一个域名访问一个IP的不同路径和不同端口,于是就有了这篇文章.&lt;br&gt;
    
    </summary>
    
      <category term="博客建设" scheme="http://jacean.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="apache" scheme="http://jacean.github.io/tags/apache/"/>
    
      <category term="泛解析" scheme="http://jacean.github.io/tags/%E6%B3%9B%E8%A7%A3%E6%9E%90/"/>
    
      <category term="虚拟主机" scheme="http://jacean.github.io/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
      <category term="tomcat" scheme="http://jacean.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>git缓存密码实现https直接提交</title>
    <link href="http://jacean.github.io/2016/04/17/git%E7%BC%93%E5%AD%98%E5%AF%86%E7%A0%81%E5%AE%9E%E7%8E%B0https%E7%9B%B4%E6%8E%A5%E6%8F%90%E4%BA%A4/"/>
    <id>http://jacean.github.io/2016/04/17/git缓存密码实现https直接提交/</id>
    <published>2016-04-17T04:47:01.000Z</published>
    <updated>2016-04-17T04:59:54.114Z</updated>
    
    <content type="html"><![CDATA[<p>git是版本控制的利器,配置ssh后,通过ssh可以很方便不需要输入密码就轻松提交.<br>但是,如果没有配置ssh,或是其他原因需要用https的话,就需要不断输入密码,搞得很麻烦.所以可以试着缓存下密码来进行自动push.<br>Ubuntu和windows都可以一句命令实现.<br><a id="more"></a><br>Ubuntu下:</p>
<blockquote>
<p>git config credential.helper store</p>
</blockquote>
<p>windows下:</p>
<blockquote>
<p>git config –global credential.helper wincred</p>
</blockquote>
<p>这样就可以记住密码,自动提交了.<br>第一次输入用户密码,以后就不用了.</p>
<p>还有一件事,我在弄的时候不小心把windows下的用在了ubuntu上,就会有提示:</p>
<blockquote>
<p>git：’credential-wincred’ 不是一个 git 命令。参见 ‘git –help’。</p>
</blockquote>
<p>所以就记得</p>
<blockquote>
<p>git config –global –unset credential.helper wincred</p>
</blockquote>
<p>来取消设置哦.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git是版本控制的利器,配置ssh后,通过ssh可以很方便不需要输入密码就轻松提交.&lt;br&gt;但是,如果没有配置ssh,或是其他原因需要用https的话,就需要不断输入密码,搞得很麻烦.所以可以试着缓存下密码来进行自动push.&lt;br&gt;Ubuntu和windows都可以一句命令实现.&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://jacean.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://jacean.github.io/tags/Linux/"/>
    
      <category term="windows" scheme="http://jacean.github.io/tags/windows/"/>
    
      <category term="git" scheme="http://jacean.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jacean.github.io/2016/04/16/hello-world/"/>
    <id>http://jacean.github.io/2016/04/16/hello-world/</id>
    <published>2016-04-16T04:48:57.414Z</published>
    <updated>2016-04-16T04:48:57.358Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="博客建设" scheme="http://jacean.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="Hexo" scheme="http://jacean.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>github配置webhooks实现博客自动部署到服务器</title>
    <link href="http://jacean.github.io/2016/04/15/github%E9%85%8D%E7%BD%AEwebhooks%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://jacean.github.io/2016/04/15/github配置webhooks实现博客自动部署到服务器/</id>
    <published>2016-04-15T12:26:44.000Z</published>
    <updated>2016-04-16T05:51:28.686Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了腾讯云的服务器,就想着把博客迁移到腾讯云,毕竟github在国内的访问速度有限而且百度也不搜索.<br>但是,总不能每次push到github,还需要跑到服务器去pull吧,那可真是呵呵了就.<br>索性,github提供了webhooks来自定义git相关的执行动作,所以就试试咯~<br><a id="more"></a></p>
<h3 id="服务器建立hook文件"><a href="#服务器建立hook文件" class="headerlink" title="服务器建立hook文件"></a>服务器建立hook文件</h3><p>首先在本地新建hook文件,以便后期github检测到改变动作后来执行,让服务器同步更新.<br>这个文件可以是各种类型.比如,php.<br>新建php文件githook.php,内容如下,然后放在网站根目录,记得不要添加到git追踪里.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html; charset=gb2312"</span>);</span><br><span class="line">error_reporting(<span class="number">7</span>);</span><br><span class="line">define(<span class="string">"WWW_ROOT"</span>, <span class="string">"C:\\xampp\\htdocs\\jacean.github.io"</span>);</span><br><span class="line">define(<span class="string">"LOG_FILE"</span>, WWW_ROOT.<span class="string">"\\git-hook.log"</span>);</span><br><span class="line">exec(WWW_ROOT.<span class="string">"\\githook.bat"</span>,$output,$ret);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"output:"</span>;</span><br><span class="line">print_r($output);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"ret:"</span>.$ret;</span><br><span class="line">$log = sprintf(<span class="string">"[%s] %s %s\n"</span>, date(<span class="string">'Y-m-d H:i:s'</span>, time()), $output,$ret);</span><br><span class="line">file_put_contents(LOG_FILE, $log, FILE_APPEND);</span><br></pre></td></tr></table></figure>
<p>githook.bat就可以写你的操作了.<br>比如,我的就是只有简单的一句,暂时:</p>
<blockquote>
<p>git pull origin master</p>
</blockquote>
<p>update:<br>直接git pull的话有时候会提示本地修改将被覆盖,导致不能正确更新,所以重写如下:</p>
<blockquote>
<p>git fetch –all<br>git reset –hard origin/master </p>
</blockquote>
<h3 id="github设置webhooks关联"><a href="#github设置webhooks关联" class="headerlink" title="github设置webhooks关联"></a>github设置webhooks关联</h3><p>然后在github,你的项目中,设置,webhooks&amp;servies,add webhooks.</p>
<blockquote>
<p>Payload URL:<a href="http://www.xxx.xxx/githook.php" target="_blank" rel="external">http://www.xxx.xxx/githook.php</a></p>
</blockquote>
<p>其他的基本默认就好.<br>添加后,github会自动ping一下,如果正确能连上的话,会给你一个小绿对勾在url的前面.</p>
<h3 id="apache账户权限设置"><a href="#apache账户权限设置" class="headerlink" title="apache账户权限设置"></a>apache账户权限设置</h3><p>如果一切正常的话这样是好了,但是,你提交一次后发现并没有什么用.<br>然而本地执行bat是好的,你再手动打开githook.php,能看到输出返回了一个1.即ret的值是1.<br>这个情况去查一下官方说明,就知道是权限问题了,原谅我刚开始没有想到这个,搞得进了误区,以为是多大事.</p>
<p>打开服务,找到apache.如果没有的话,去xampp的apache下,有个install_apacheservice的bat,在关闭apache后执行,会看到在服务列表里多了apache.<br>然后属性apache,找到登陆,设置账户,这个账户得是有权限读写网站目录的账户,最高的就是administrator了.设置好后确定.<br>然后重启apache.</p>
<p>再次直接访问githook.php,发现ret=0了.想来是大功告成.<br>然后再提交一次试试,看看有木有效果吧~~~</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>综上,可以看出这个原理其实很简单,当github检测到提交操作后,就会执行你的webhooks所指向的文件,然后在这个文件里咱们预设动作即可.<br>很简单吧.<br>hook钩子操作很有用.<br>比如你在自己服务器搭建了git服务,假设用的是gitstack,然后你希望在有提交的时候把最新版抄送到网站目录下,也可以使用hooks.<br>在gitstack的repositories下,找到项目,里面有个hooks,预设了很多hooksample,有提交前验证,提交后处理,或是其他,咱们都可以自己修改.<br><em>注意还是要把gitstack的登陆用户设置好为有权限读写.</em><br>我就在post-receive中加入了在网站目录下的git pull,以保持我的网站持续更新.<br>当然,也可以借助自己的git服务器为中介,在git到服务器后,再利用服务器的hooks,将提交发送到github,来实现github的同步更新.</p>
<p>参考:<br><a href="http://linroid.com/2015/01/21/using-github-webhook-to-deploy-my-blog/" target="_blank" rel="external">利用Github的Webhook部署博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近买了腾讯云的服务器,就想着把博客迁移到腾讯云,毕竟github在国内的访问速度有限而且百度也不搜索.&lt;br&gt;但是,总不能每次push到github,还需要跑到服务器去pull吧,那可真是呵呵了就.&lt;br&gt;索性,github提供了webhooks来自定义git相关的执行动作,所以就试试咯~&lt;br&gt;
    
    </summary>
    
      <category term="博客建设" scheme="http://jacean.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="Github" scheme="http://jacean.github.io/tags/Github/"/>
    
      <category term="webhooks" scheme="http://jacean.github.io/tags/webhooks/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置C/C++的编译调试环境</title>
    <link href="http://jacean.github.io/2016/04/04/vscode%E9%85%8D%E7%BD%AEC-C-%E7%9A%84%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <id>http://jacean.github.io/2016/04/04/vscode配置C-C-的编译调试环境/</id>
    <published>2016-04-04T15:11:08.000Z</published>
    <updated>2016-04-16T04:57:08.252Z</updated>
    
    <content type="html"><![CDATA[<p>传说中的编辑器有两个，vim和emacs，一个是编辑器之神，一个是神的编辑器。然后又有众多小神，是两极多强格局。<br>然后，软爹说，要有我，于是vscode从天而降，带着继承自vs强大的智能，体积却极其轻简，同时支持插件，而且流畅至极，一脚踏进了编辑器之战。<br>于是，感觉要变天了。<br>用着轻量的编辑器，却又想把编辑器打造成IDE，，，于是开始了Debug插件的配置。<br><a id="more"></a></p>
<h2 id="安装DEBUG"><a href="#安装DEBUG" class="headerlink" title="安装DEBUG"></a>安装DEBUG</h2><p>本来有一款C/C++的插件，是利用微软的CLI的，但是Ubuntu15.10不在支持之列，在尝试无果之后只能放弃，万幸还有Debug.<br>ctrl-p，呼出命令行，输入</p>
<blockquote>
<p>ext install debug</p>
</blockquote>
<p>回车就可安装debug插件了。也可以在<a href="https://marketplace.visualstudio.com/items?itemName=webfreak.debug" target="_blank" rel="external">vscodemarket</a>里自己找.</p>
<h2 id="调试，配置launch-json"><a href="#调试，配置launch-json" class="headerlink" title="调试，配置launch.json"></a>调试，配置launch.json</h2><p>插件安装好后，打开C项目，选中调试栏的齿轮设置，在弹出的下拉列表里选择debug，会自动生成一分launch.json,但是还不能直接用的，需要改改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Debug&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;target&quot;: &quot;./bin/executable&quot;,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他的不多说了，主要就说下target，这个是gdb调试的目标，所以就应该是编译后的文件对吧。<br>那好，比如我有hello.c，那么在终端,首先切换到项目根目录，方便解释，然后执行如下，</p>
<blockquote>
<p>gcc -g hello.c -o hello</p>
</blockquote>
<p>会生成编译后的hello文件，要调试的话就把gdb的targe指向这个文件，需要修改如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Debug&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;target&quot;: &quot;hello&quot;,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候在vscode里，点击绿色小三角，或是F5，就可以进行调试了。<br>可以在vscode的控制台里看到输出。如果需要输入，那么在最下面的命令输入里输入就好，不过那个只有单行显示，cry…<br>第一步至此完成了，可以用debug来调试了。</p>
<h2 id="编译，配置tasks-json"><a href="#编译，配置tasks-json" class="headerlink" title="编译，配置tasks.json"></a>编译，配置tasks.json</h2><p>如果每次都需要在外面编译后再来手动调试，无疑很烦，最好是在F5的时候先编译再执行调试，对吧。<br>vscode支持定义预处理任务，ctrl+shift-p,输入</p>
<blockquote>
<p>configure task runner</p>
</blockquote>
<p>会自动生成一分tasks.json，里面有许多例子。咱们就只改改第一个就好，其他的先删掉。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// Available variables which can be used inside of strings.</span><br><span class="line">// $&#123;workspaceRoot&#125;: the root folder of the team        # /home/jacean/workspace/C/</span><br><span class="line">// $&#123;file&#125;: the current opened file                     # /home/jacean/workspace/C/hello.c</span><br><span class="line">// $&#123;fileBasename&#125;: the current opened file&apos;s basename  # hello.c</span><br><span class="line">// $&#123;fileDirname&#125;: the current opened file&apos;s dirname    # /home/jacean/workspace/C/</span><br><span class="line">// $&#123;fileExtname&#125;: the current opened file&apos;s extension  #.c</span><br><span class="line">// $&#123;cwd&#125;: the current working directory of the spawned process</span><br><span class="line"></span><br><span class="line">// A task runner that calls the Typescript compiler (tsc) and</span><br><span class="line">// Compiles a HelloWorld.ts program</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;tsc&quot;,</span><br><span class="line">    &quot;isShellCommand&quot;: true,</span><br><span class="line">    &quot;showOutput&quot;: &quot;silent&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;HelloWorld.ts&quot;],</span><br><span class="line">    &quot;problemMatcher&quot;: &quot;$tsc&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最开始是一些替换变量，假设我的文件hello.c的完全路径是</p>
<blockquote>
<p>/home/jacean/workspace/C/hello.c</p>
</blockquote>
<p>那么，那些变量对应的依次就是代码里#之后的,是项目空间路径，文件名，文件去除前缀，文件扩展名，文件所在目录，最后一个是衍生进程的目录(不太清楚).<br>这是预执行，那就是要执行那句编译命令了，所以修改如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;gcc&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;-g&quot;, &quot;hello.c&quot;, &quot;-o&quot;, &quot;hello&quot;],</span><br><span class="line">    &quot;problemMatcher&quot;: &#123;</span><br><span class="line">        &quot;owner&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;fileLocation&quot;: [&quot;relative&quot;, &quot;$&#123;workspaceRoot&#125;&quot;],</span><br><span class="line">        &quot;pattern&quot;: &#123;</span><br><span class="line">            &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,</span><br><span class="line">            &quot;file&quot;: 1,</span><br><span class="line">            &quot;line&quot;: 2,</span><br><span class="line">            &quot;column&quot;: 3,</span><br><span class="line">            &quot;severity&quot;: 4,</span><br><span class="line">            &quot;message&quot;: 5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个在官方说明里有，可以自己找找。然后直接F5，正常调试了。要是不信就删掉hello，然后重新来一次吧。<br>至此，就实现了一步编译调试。<br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/vscode-c-debug.jpg" alt="调试展示"></p>
<p>但是，每次都只针对一个文件，换个文件不是又要改，不能容忍，所以继续往下看。</p>
<h2 id="自动编译当前打开文件并启动调试"><a href="#自动编译当前打开文件并启动调试" class="headerlink" title="自动编译当前打开文件并启动调试"></a>自动编译当前打开文件并启动调试</h2><p>这时候就需要那几个替换变量，把需要改变的用变量来替换。修改后如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//launch.json</span><br><span class="line">&#123;</span><br><span class="line">	&quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">	&quot;configurations&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;name&quot;: &quot;Debug&quot;,</span><br><span class="line">			&quot;type&quot;: &quot;gdb&quot;,</span><br><span class="line">			&quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">			&quot;target&quot;: &quot;$&#123;file&#125;.o&quot;,</span><br><span class="line">			&quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;gcc&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//tasks.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">    &quot;command&quot;: &quot;gcc&quot;,</span><br><span class="line">    &quot;args&quot;: [&quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;file&#125;.o&quot;],</span><br><span class="line">    &quot;problemMatcher&quot;: &#123;</span><br><span class="line">        &quot;owner&quot;: &quot;cpp&quot;,</span><br><span class="line">        &quot;fileLocation&quot;: [&quot;relative&quot;, &quot;$&#123;workspaceRoot&#125;&quot;],</span><br><span class="line">        &quot;pattern&quot;: &#123;</span><br><span class="line">            &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,</span><br><span class="line">            &quot;file&quot;: 1,</span><br><span class="line">            &quot;line&quot;: 2,</span><br><span class="line">            &quot;column&quot;: 3,</span><br><span class="line">            &quot;severity&quot;: 4,</span><br><span class="line">            &quot;message&quot;: 5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表骂我为什么要在后面加个o，因为我不知道怎么去除后缀。。。</p>
<blockquote>
<p>basename hello.c .c</p>
</blockquote>
<p>要是能这样我就这样了，就是不会，所以只能变丑点，生成hello.c.o了。不过，反正编译对象人家又不看你长啥样，只要心灵美就行了不是。<br>然后，选中任意一个.c文件，F5或是绿三角，就会看到如愿以偿的可以调试了。虽然多出了个丑丑的.c.o。<br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/cs-code-debug-2.jpg" alt="多出的.c.o"></p>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><ol>
<li>如果gcc后面的参数没有-g，那就不会生成可以调试的文件了，一定要有，否则F5会报错的。详情请参阅gcc命令。<blockquote>
<p>Debug adapter process has terminated unexpectedly</p>
</blockquote>
</li>
</ol>
<ol>
<li>最坑爹的，坑了我大半天时间的，就是权限问题。我的vscode文件夹在/opt/下，所以即使是配置好了其他的，调试也是报错<blockquote>
<p>Debug adapter process has terminated unexpectedly</p>
</blockquote>
</li>
</ol>
<p>最后实在无奈，快要放弃的时候想起来这是Ubuntu，可能和权限有关，于是把文件夹拷出来，放到home/jacean下，运行，然后再配，就好了，欲哭无泪啊！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传说中的编辑器有两个，vim和emacs，一个是编辑器之神，一个是神的编辑器。然后又有众多小神，是两极多强格局。&lt;br&gt;然后，软爹说，要有我，于是vscode从天而降，带着继承自vs强大的智能，体积却极其轻简，同时支持插件，而且流畅至极，一脚踏进了编辑器之战。&lt;br&gt;于是，感觉要变天了。&lt;br&gt;用着轻量的编辑器，却又想把编辑器打造成IDE，，，于是开始了Debug插件的配置。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://jacean.github.io/categories/Linux/"/>
    
    
      <category term="vscode" scheme="http://jacean.github.io/tags/vscode/"/>
    
      <category term="c/c++" scheme="http://jacean.github.io/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装xampp并配置xdebug利用vscode调试php</title>
    <link href="http://jacean.github.io/2016/04/04/Ubuntu%E5%AE%89%E8%A3%85xampp%E5%B9%B6%E9%85%8D%E7%BD%AExdebug%E5%88%A9%E7%94%A8vscode%E8%B0%83%E8%AF%95php/"/>
    <id>http://jacean.github.io/2016/04/04/Ubuntu安装xampp并配置xdebug利用vscode调试php/</id>
    <published>2016-04-04T08:02:54.000Z</published>
    <updated>2016-04-16T04:55:27.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装XAMPP"><a href="#安装XAMPP" class="headerlink" title="安装XAMPP"></a>安装XAMPP</h2><p>去xampp官网下载对应版本，ubuntu会下载.run文件。</p>
<blockquote>
<p>sudo mv xampp-linux-x64-5.6.19-0-installer.run  /opt/</p>
<p>cd /opt/</p>
<p>sudo -s</p>
<p>chmod 755 xampp-linux-x64-5.6.19-0-installer.run </p>
<p>./xampp-linux-x64-5.6.19-0-installer.run </p>
</blockquote>
<p>依次执行上面命令，就会打开xampp的安装窗口，安装就好。<br><a id="more"></a></p>
<h2 id="vscode安装插件"><a href="#vscode安装插件" class="headerlink" title="vscode安装插件"></a>vscode安装插件</h2><p>ctrl-p调出控制，输入</p>
<blockquote>
<p>ext install php-debug.</p>
</blockquote>
<p>安装完毕，然后在vscode的usersetting里添加如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    // Points to the php executable.</span><br><span class="line">	&quot;php.validate.executablePath&quot;: &quot;/opt/lampp/bin/php&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指定php的路径，然后需要配置xdebug。</p>
<h2 id="配置xdebug"><a href="#配置xdebug" class="headerlink" title="配置xdebug"></a>配置xdebug</h2><p>首先去xdebug官网下载source，然后执行如下命令解压：</p>
<blockquote>
<p>tar -zxf xdebug-2.4.0.tgz</p>
</blockquote>
<p>执行phpize</p>
<blockquote>
<p>cd xdebug-2.4.0/</p>
<p>/opt/lampp/bin/phpize</p>
</blockquote>
<p>显示如下，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20131106</span><br><span class="line">Zend Module Api No:      20131226</span><br><span class="line">Zend Extension Api No:   220131226</span><br><span class="line">Cannot find autoconf. Please check your autoconf installation and the</span><br><span class="line">$PHP_AUTOCONF environment variable. Then, rerun this script.</span><br></pre></td></tr></table></figure>
<p>从提示看出我是缺了东西了，那就装上，执行命令如下</p>
<blockquote>
<p>sudo apt-get install autoconf</p>
</blockquote>
<p>再次执行</p>
<blockquote>
<p> /opt/lampp/bin/phpize</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20131106</span><br><span class="line">Zend Module Api No:      20131226</span><br><span class="line">Zend Extension Api No:   220131226</span><br></pre></td></tr></table></figure>
<p>现在可以看出是正常了，可以继续了。</p>
<blockquote>
<p> ./configure –enable-xdebug –with-php-config=/opt/lampp/bin/php-config</p>
<p>sudo make</p>
</blockquote>
<p>执行后显示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxxxxx</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build complete.</span><br><span class="line">Don&apos;t forget to run &apos;make test&apos;.</span><br></pre></td></tr></table></figure>
<p>那我就试一试。。。</p>
<blockquote>
<p>make test</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Build complete.</span><br><span class="line">Don&apos;t forget to run &apos;make test&apos;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=====================================================================</span><br><span class="line">PHP         : /opt/lampp/bin/php </span><br><span class="line">PHP_SAPI    : cli</span><br><span class="line">PHP_VERSION : 5.6.19</span><br><span class="line">ZEND_VERSION: 2.6.0</span><br><span class="line">PHP_OS      : Linux - Linux jacean-Ubuntu 4.2.0-34-generic #39-Ubuntu SMP Thu Mar 10 22:13:01 UTC 2016 x86_64</span><br><span class="line">INI actual  : /home/jacean/文档/xdebug-2.4.0/tmp-php.ini</span><br><span class="line">More .INIs  :  </span><br><span class="line">CWD         : /home/jacean/文档/xdebug-2.4.0</span><br><span class="line">Extra dirs  : </span><br><span class="line">VALGRIND    : Not used</span><br><span class="line">=====================================================================</span><br><span class="line">TIME START 2016-04-04 08:30:01</span><br><span class="line">=====================================================================</span><br><span class="line">No tests were run.</span><br></pre></td></tr></table></figure>
<p>然后安装</p>
<blockquote>
<p>sudo make install</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Installing shared extensions:     /opt/lampp/lib/php/extensions/no-debug-non-zts-20131226/</span><br><span class="line"></span><br><span class="line">  +----------------------------------------------------------------------+</span><br><span class="line">  |                                                                      |</span><br><span class="line">  |   INSTALLATION INSTRUCTIONS                                          |</span><br><span class="line">  |   =========================                                          |</span><br><span class="line">  |                                                                      |</span><br><span class="line">  |   See http://xdebug.org/install.php#configure-php for instructions   |</span><br><span class="line">  |   on how to enable Xdebug for PHP.                                   |</span><br><span class="line">  |                                                                      |</span><br><span class="line">  |   Documentation is available online as well:                         |</span><br><span class="line">  |   - A list of all settings:  http://xdebug.org/docs-settings.php     |</span><br><span class="line">  |   - A list of all functions: http://xdebug.org/docs-functions.php    |</span><br><span class="line">  |   - Profiling instructions:  http://xdebug.org/docs-profiling2.php   |</span><br><span class="line">  |   - Remote debugging:        http://xdebug.org/docs-debugger.php     |</span><br><span class="line">  |                                                                      |</span><br><span class="line">  |                                                                      |</span><br><span class="line">  |   NOTE: Please disregard the message                                 |</span><br><span class="line">  |       You should add &quot;extension=xdebug.so&quot; to php.ini                |</span><br><span class="line">  |   that is emitted by the PECL installer. This does not work for      |</span><br><span class="line">  |   Xdebug.                                                            |</span><br><span class="line">  |                                                                      |</span><br><span class="line">  +----------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>接下来就是配置php.ini，</p>
<blockquote>
<p>sudo gvim /opt/lampp/etc/php.ini</p>
</blockquote>
<p>末尾添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Xdebug]</span><br><span class="line">zend_extension=/opt/lampp/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so</span><br><span class="line">xdebug.profiler_enable=on</span><br><span class="line">xdebug.trace_output_dir=&quot;../xdebug&quot;</span><br><span class="line">xdebug.profile_output_dir=&quot;../xdebug&quot;</span><br><span class="line">xdebug.remote_enable = 1        //这两行远程是配合vscode的</span><br><span class="line">xdebug.remote_autostart = 1</span><br></pre></td></tr></table></figure>
<p>然后重启ｘａｍｐｐ，在phpinfo页面就可以看到有关ｘｄｅｂｕｇ的信息了。</p>
<h2 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h2><p>xampp默认的网站根目录是htdocs，因为/opt/lamp/htdocs的操作是需要root权限的，很不方便，所以就把根目录改一下。</p>
<blockquote>
<p>mkdir ~/workspace/WEB</p>
</blockquote>
<p>然后修改httpd.conf,在/opt/lamp/etc下。</p>
<blockquote>
<p>sudo gvim httpd.conf</p>
</blockquote>
<p>修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># DocumentRoot &quot;/opt/lampp/htdocs&quot;</span><br><span class="line"># &lt; Directory &quot;/opt/lampp/htdocs&quot;&gt;</span><br><span class="line">DocumentRoot &quot;/home/jacean/workspace/WEB&quot;</span><br><span class="line">&lt; Directory &quot;/home/jacean/workspace/WEB&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><em>我在&lt;&gt;之间加了一个空格，是为了避免markdown格式显示，应该删掉。</em></p>
<p>然后，在WEB目录下新建index.php，保存。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="number">1</span>;</span><br><span class="line">$b=<span class="number">2</span>;</span><br><span class="line">$c=$a-$b;</span><br><span class="line">$d=$c+$b;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;strong&gt;hello world!&lt;/strong&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>然后加断点，比如我加到$c那一行。<br>记得在ｄｅｂｕｇ栏中选择设置齿轮，在下拉中选中php debug，会自动生成lanch.json文件，<br>然后再点击绿三角运行。<br>启动调试监听，<br>重启xampp，进入localhost。可以看到vscode自动弹出并标识在断点处，此时可以查看变量等等常用调试操作。<br><img src="http://7xrtyi.com1.z0.glb.clouddn.com/hexoblog-img-vscode-php-debug.jpg" alt="php_debug"></p>
<p>至此，大功告成！！！</p>
<h2 id="xampp启动"><a href="#xampp启动" class="headerlink" title="xampp启动"></a>xampp启动</h2><p>要启动xampp桌面程序，可以在命令行输入</p>
<blockquote>
<p>cd /opt/lampp<br>sudo ./manager-linux-x64.run</p>
</blockquote>
<p>直接命令行启动</p>
<blockquote>
<p>lampp start<br>lampp stop<br>lampp restart</p>
</blockquote>
<p>只启动和停止Apache：</p>
<blockquote>
<p>/opt/lampp/lampp startapache(stopapache)</p>
</blockquote>
<p>只启动和停止MySQL：</p>
<blockquote>
<p>/opt/lampp/lampp startmysql(stopmysql)</p>
</blockquote>
<p>只启动和停止ProFTPD服务器：</p>
<blockquote>
<p>/opt/lampp/lampp startftp(stopftp)</p>
</blockquote>
<p>启动和停止Apache的SSL支持：</p>
<blockquote>
<p>/opt/lampp/lampp startssl(stopssl)</p>
</blockquote>
<p>取消自启动：</p>
<blockquote>
<p>ln –s /opt/lampp/lampp K01lampp</p>
</blockquote>
<p>卸载XAMPP:</p>
<blockquote>
<p>rm –rf /opt/lampp</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装XAMPP&quot;&gt;&lt;a href=&quot;#安装XAMPP&quot; class=&quot;headerlink&quot; title=&quot;安装XAMPP&quot;&gt;&lt;/a&gt;安装XAMPP&lt;/h2&gt;&lt;p&gt;去xampp官网下载对应版本，ubuntu会下载.run文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo mv xampp-linux-x64-5.6.19-0-installer.run  /opt/&lt;/p&gt;
&lt;p&gt;cd /opt/&lt;/p&gt;
&lt;p&gt;sudo -s&lt;/p&gt;
&lt;p&gt;chmod 755 xampp-linux-x64-5.6.19-0-installer.run &lt;/p&gt;
&lt;p&gt;./xampp-linux-x64-5.6.19-0-installer.run &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;依次执行上面命令，就会打开xampp的安装窗口，安装就好。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://jacean.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="http://jacean.github.io/categories/%E5%90%8E%E7%AB%AF/Linux/"/>
    
    
      <category term="Ubuntu" scheme="http://jacean.github.io/tags/Ubuntu/"/>
    
      <category term="php" scheme="http://jacean.github.io/tags/php/"/>
    
      <category term="vscode" scheme="http://jacean.github.io/tags/vscode/"/>
    
  </entry>
  
</feed>
